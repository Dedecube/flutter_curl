// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class LibCURL {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibCURL(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibCURL.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdinp =
      _lookup<ffi.Pointer<FILE>>('__stdinp');

  ffi.Pointer<FILE> get __stdinp => ___stdinp.value;

  set __stdinp(ffi.Pointer<FILE> value) => ___stdinp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdoutp =
      _lookup<ffi.Pointer<FILE>>('__stdoutp');

  ffi.Pointer<FILE> get __stdoutp => ___stdoutp.value;

  set __stdoutp(ffi.Pointer<FILE> value) => ___stdoutp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stderrp =
      _lookup<ffi.Pointer<FILE>>('__stderrp');

  ffi.Pointer<FILE> get __stderrp => ___stderrp.value;

  set __stderrp(ffi.Pointer<FILE> value) => ___stderrp.value = value;

  late final ffi.Pointer<ffi.Int32> _sys_nerr = _lookup<ffi.Int32>('sys_nerr');

  int get sys_nerr => _sys_nerr.value;

  set sys_nerr(int value) => _sys_nerr.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _sys_errlist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('sys_errlist');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get sys_errlist => _sys_errlist.value;

  set sys_errlist(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) =>
      _sys_errlist.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('tzname');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get tzname => _tzname.value;

  set tzname(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) => _tzname.value = value;

  late final ffi.Pointer<ffi.Int32> _getdate_err =
      _lookup<ffi.Int32>('getdate_err');

  int get getdate_err => _getdate_err.value;

  set getdate_err(int value) => _getdate_err.value = value;

  late final ffi.Pointer<ffi.Int64> _timezone = _lookup<ffi.Int64>('timezone');

  int get timezone => _timezone.value;

  set timezone(int value) => _timezone.value = value;

  late final ffi.Pointer<ffi.Int32> _daylight = _lookup<ffi.Int32>('daylight');

  int get daylight => _daylight.value;

  set daylight(int value) => _daylight.value = value;

  ffi.Pointer<curl_mime> curl_mime_init(
    ffi.Pointer<ffi.Void> easy,
  ) {
    return _curl_mime_init(
      easy,
    );
  }

  late final _curl_mime_init_ptr =
      _lookup<ffi.NativeFunction<_c_curl_mime_init>>('curl_mime_init');
  late final _dart_curl_mime_init _curl_mime_init =
      _curl_mime_init_ptr.asFunction<_dart_curl_mime_init>();

  void curl_mime_free(
    ffi.Pointer<curl_mime> mime,
  ) {
    return _curl_mime_free(
      mime,
    );
  }

  late final _curl_mime_free_ptr =
      _lookup<ffi.NativeFunction<_c_curl_mime_free>>('curl_mime_free');
  late final _dart_curl_mime_free _curl_mime_free =
      _curl_mime_free_ptr.asFunction<_dart_curl_mime_free>();

  ffi.Pointer<curl_mimepart> curl_mime_addpart(
    ffi.Pointer<curl_mime> mime,
  ) {
    return _curl_mime_addpart(
      mime,
    );
  }

  late final _curl_mime_addpart_ptr =
      _lookup<ffi.NativeFunction<_c_curl_mime_addpart>>('curl_mime_addpart');
  late final _dart_curl_mime_addpart _curl_mime_addpart =
      _curl_mime_addpart_ptr.asFunction<_dart_curl_mime_addpart>();

  int curl_mime_name(
    ffi.Pointer<curl_mimepart> part_1,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _curl_mime_name(
      part_1,
      name,
    );
  }

  late final _curl_mime_name_ptr =
      _lookup<ffi.NativeFunction<_c_curl_mime_name>>('curl_mime_name');
  late final _dart_curl_mime_name _curl_mime_name =
      _curl_mime_name_ptr.asFunction<_dart_curl_mime_name>();

  int curl_mime_filename(
    ffi.Pointer<curl_mimepart> part_1,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    return _curl_mime_filename(
      part_1,
      filename,
    );
  }

  late final _curl_mime_filename_ptr =
      _lookup<ffi.NativeFunction<_c_curl_mime_filename>>('curl_mime_filename');
  late final _dart_curl_mime_filename _curl_mime_filename =
      _curl_mime_filename_ptr.asFunction<_dart_curl_mime_filename>();

  int curl_mime_data(
    ffi.Pointer<curl_mimepart> part_1,
    ffi.Pointer<ffi.Int8> data,
    int datasize,
  ) {
    return _curl_mime_data(
      part_1,
      data,
      datasize,
    );
  }

  late final _curl_mime_data_ptr =
      _lookup<ffi.NativeFunction<_c_curl_mime_data>>('curl_mime_data');
  late final _dart_curl_mime_data _curl_mime_data =
      _curl_mime_data_ptr.asFunction<_dart_curl_mime_data>();

  int curl_mime_filedata(
    ffi.Pointer<curl_mimepart> part_1,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    return _curl_mime_filedata(
      part_1,
      filename,
    );
  }

  late final _curl_mime_filedata_ptr =
      _lookup<ffi.NativeFunction<_c_curl_mime_filedata>>('curl_mime_filedata');
  late final _dart_curl_mime_filedata _curl_mime_filedata =
      _curl_mime_filedata_ptr.asFunction<_dart_curl_mime_filedata>();

  ffi.Pointer<ffi.Int8> curl_version() {
    return _curl_version();
  }

  late final _curl_version_ptr =
      _lookup<ffi.NativeFunction<_c_curl_version>>('curl_version');
  late final _dart_curl_version _curl_version =
      _curl_version_ptr.asFunction<_dart_curl_version>();

  ffi.Pointer<curl_slist> curl_slist_append(
    ffi.Pointer<curl_slist> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _curl_slist_append(
      arg0,
      arg1,
    );
  }

  late final _curl_slist_append_ptr =
      _lookup<ffi.NativeFunction<_c_curl_slist_append>>('curl_slist_append');
  late final _dart_curl_slist_append _curl_slist_append =
      _curl_slist_append_ptr.asFunction<_dart_curl_slist_append>();

  void curl_slist_free_all(
    ffi.Pointer<curl_slist> arg0,
  ) {
    return _curl_slist_free_all(
      arg0,
    );
  }

  late final _curl_slist_free_all_ptr =
      _lookup<ffi.NativeFunction<_c_curl_slist_free_all>>(
          'curl_slist_free_all');
  late final _dart_curl_slist_free_all _curl_slist_free_all =
      _curl_slist_free_all_ptr.asFunction<_dart_curl_slist_free_all>();

  int curl_getdate(
    ffi.Pointer<ffi.Int8> p,
    ffi.Pointer<ffi.Int64> unused,
  ) {
    return _curl_getdate(
      p,
      unused,
    );
  }

  late final _curl_getdate_ptr =
      _lookup<ffi.NativeFunction<_c_curl_getdate>>('curl_getdate');
  late final _dart_curl_getdate _curl_getdate =
      _curl_getdate_ptr.asFunction<_dart_curl_getdate>();

  ffi.Pointer<ffi.Int8> curl_easy_strerror(
    int arg0,
  ) {
    return _curl_easy_strerror(
      arg0,
    );
  }

  late final _curl_easy_strerror_ptr =
      _lookup<ffi.NativeFunction<_c_curl_easy_strerror>>('curl_easy_strerror');
  late final _dart_curl_easy_strerror _curl_easy_strerror =
      _curl_easy_strerror_ptr.asFunction<_dart_curl_easy_strerror>();

  ffi.Pointer<ffi.Void> curl_easy_init() {
    return _curl_easy_init();
  }

  late final _curl_easy_init_ptr =
      _lookup<ffi.NativeFunction<_c_curl_easy_init>>('curl_easy_init');
  late final _dart_curl_easy_init _curl_easy_init =
      _curl_easy_init_ptr.asFunction<_dart_curl_easy_init>();

  void curl_easy_cleanup(
    ffi.Pointer<ffi.Void> curl,
  ) {
    return _curl_easy_cleanup(
      curl,
    );
  }

  late final _curl_easy_cleanup_ptr =
      _lookup<ffi.NativeFunction<_c_curl_easy_cleanup>>('curl_easy_cleanup');
  late final _dart_curl_easy_cleanup _curl_easy_cleanup =
      _curl_easy_cleanup_ptr.asFunction<_dart_curl_easy_cleanup>();

  ffi.Pointer<ffi.Void> curl_multi_init() {
    return _curl_multi_init();
  }

  late final _curl_multi_init_ptr =
      _lookup<ffi.NativeFunction<_c_curl_multi_init>>('curl_multi_init');
  late final _dart_curl_multi_init _curl_multi_init =
      _curl_multi_init_ptr.asFunction<_dart_curl_multi_init>();

  int curl_multi_add_handle(
    ffi.Pointer<ffi.Void> multi_handle,
    ffi.Pointer<ffi.Void> curl_handle,
  ) {
    return _curl_multi_add_handle(
      multi_handle,
      curl_handle,
    );
  }

  late final _curl_multi_add_handle_ptr =
      _lookup<ffi.NativeFunction<_c_curl_multi_add_handle>>(
          'curl_multi_add_handle');
  late final _dart_curl_multi_add_handle _curl_multi_add_handle =
      _curl_multi_add_handle_ptr.asFunction<_dart_curl_multi_add_handle>();

  int curl_multi_remove_handle(
    ffi.Pointer<ffi.Void> multi_handle,
    ffi.Pointer<ffi.Void> curl_handle,
  ) {
    return _curl_multi_remove_handle(
      multi_handle,
      curl_handle,
    );
  }

  late final _curl_multi_remove_handle_ptr =
      _lookup<ffi.NativeFunction<_c_curl_multi_remove_handle>>(
          'curl_multi_remove_handle');
  late final _dart_curl_multi_remove_handle _curl_multi_remove_handle =
      _curl_multi_remove_handle_ptr
          .asFunction<_dart_curl_multi_remove_handle>();

  int curl_multi_perform(
    ffi.Pointer<ffi.Void> multi_handle,
    ffi.Pointer<ffi.Int32> running_handles,
  ) {
    return _curl_multi_perform(
      multi_handle,
      running_handles,
    );
  }

  late final _curl_multi_perform_ptr =
      _lookup<ffi.NativeFunction<_c_curl_multi_perform>>('curl_multi_perform');
  late final _dart_curl_multi_perform _curl_multi_perform =
      _curl_multi_perform_ptr.asFunction<_dart_curl_multi_perform>();

  ffi.Pointer<CURLMsg> curl_multi_info_read(
    ffi.Pointer<ffi.Void> multi_handle,
    ffi.Pointer<ffi.Int32> msgs_in_queue,
  ) {
    return _curl_multi_info_read(
      multi_handle,
      msgs_in_queue,
    );
  }

  late final _curl_multi_info_read_ptr =
      _lookup<ffi.NativeFunction<_c_curl_multi_info_read>>(
          'curl_multi_info_read');
  late final _dart_curl_multi_info_read _curl_multi_info_read =
      _curl_multi_info_read_ptr.asFunction<_dart_curl_multi_info_read>();

  late final ffi.Pointer<ffi.Int32> _CURL = _lookup<ffi.Int32>('CURL');

  int get CURL => _CURL.value;

  set CURL(int value) => _CURL.value = value;

  late final ffi.Pointer<ffi.Int32> _CURLcode_1 =
      _lookup<ffi.Int32>('CURLcode');

  int get CURLcode_1 => _CURLcode_1.value;

  set CURLcode_1(int value) => _CURLcode_1.value = value;
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Int8> __opaque;
}

class fd_set extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int32> fds_bits;
}

abstract class curl_easytype {
  static const int CURLOT_LONG = 0;
  static const int CURLOT_VALUES = 1;
  static const int CURLOT_OFF_T = 2;
  static const int CURLOT_OBJECT = 3;
  static const int CURLOT_STRING = 4;
  static const int CURLOT_SLIST = 5;
  static const int CURLOT_CBPTR = 6;
  static const int CURLOT_BLOB = 7;
  static const int CURLOT_FUNCTION = 8;
}

class curl_easyoption extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  @ffi.Int32()
  external int id;

  @ffi.Int32()
  external int type;

  @ffi.Uint32()
  external int flags;
}

class __sbuf extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> _base;

  @ffi.Int32()
  external int _size;
}

class __sFILEX extends ffi.Opaque {}

class FILE extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> _p;

  @ffi.Int32()
  external int _r;

  @ffi.Int32()
  external int _w;

  @ffi.Int16()
  external int _flags;

  @ffi.Int16()
  external int _file;

  external __sbuf _bf;

  @ffi.Int32()
  external int _lbfsize;

  external ffi.Pointer<ffi.Void> _cookie;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_2>> _close;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_3>> _read;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_4>> _seek;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_5>> _write;

  external __sbuf _ub;

  external ffi.Pointer<__sFILEX> _extra;

  @ffi.Int32()
  external int _ur;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint8> _ubuf;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Uint8> _nbuf;

  external __sbuf _lb;

  @ffi.Int32()
  external int _blksize;

  @ffi.Int64()
  external int _offset;
}

class iovec extends ffi.Struct {
  external ffi.Pointer<ffi.Void> iov_base;

  @ffi.Uint64()
  external int iov_len;
}

class sockaddr extends ffi.Struct {
  @ffi.Uint8()
  external int sa_len;

  @ffi.Uint8()
  external int sa_family;

  @ffi.Array.multi([14])
  external ffi.Array<ffi.Int8> sa_data;
}

class sa_endpoints_t extends ffi.Struct {
  @ffi.Uint32()
  external int sae_srcif;

  external ffi.Pointer<sockaddr> sae_srcaddr;

  @ffi.Uint32()
  external int sae_srcaddrlen;

  external ffi.Pointer<sockaddr> sae_dstaddr;

  @ffi.Uint32()
  external int sae_dstaddrlen;
}

class linger extends ffi.Struct {
  @ffi.Int32()
  external int l_onoff;

  @ffi.Int32()
  external int l_linger;
}

class so_np_extensions extends ffi.Struct {
  @ffi.Uint32()
  external int npx_flags;

  @ffi.Uint32()
  external int npx_mask;
}

class sockproto extends ffi.Struct {
  @ffi.Uint16()
  external int sp_family;

  @ffi.Uint16()
  external int sp_protocol;
}

class sockaddr_storage extends ffi.Struct {
  @ffi.Uint8()
  external int ss_len;

  @ffi.Uint8()
  external int ss_family;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Int8> __ss_pad1;

  @ffi.Int64()
  external int __ss_align;

  @ffi.Array.multi([112])
  external ffi.Array<ffi.Int8> __ss_pad2;
}

class msghdr extends ffi.Struct {
  external ffi.Pointer<ffi.Void> msg_name;

  @ffi.Uint32()
  external int msg_namelen;

  external ffi.Pointer<iovec> msg_iov;

  @ffi.Int32()
  external int msg_iovlen;

  external ffi.Pointer<ffi.Void> msg_control;

  @ffi.Uint32()
  external int msg_controllen;

  @ffi.Int32()
  external int msg_flags;
}

class cmsghdr extends ffi.Struct {
  @ffi.Uint32()
  external int cmsg_len;

  @ffi.Int32()
  external int cmsg_level;

  @ffi.Int32()
  external int cmsg_type;
}

class sf_hdtr extends ffi.Struct {
  external ffi.Pointer<iovec> headers;

  @ffi.Int32()
  external int hdr_cnt;

  external ffi.Pointer<iovec> trailers;

  @ffi.Int32()
  external int trl_cnt;
}

class timespec extends ffi.Struct {
  @ffi.Int64()
  external int tv_sec;

  @ffi.Int64()
  external int tv_nsec;
}

class tm extends ffi.Struct {
  @ffi.Int32()
  external int tm_sec;

  @ffi.Int32()
  external int tm_min;

  @ffi.Int32()
  external int tm_hour;

  @ffi.Int32()
  external int tm_mday;

  @ffi.Int32()
  external int tm_mon;

  @ffi.Int32()
  external int tm_year;

  @ffi.Int32()
  external int tm_wday;

  @ffi.Int32()
  external int tm_yday;

  @ffi.Int32()
  external int tm_isdst;

  @ffi.Int64()
  external int tm_gmtoff;

  external ffi.Pointer<ffi.Int8> tm_zone;
}

abstract class clockid_t {
  static const int _CLOCK_REALTIME = 0;
  static const int _CLOCK_MONOTONIC = 6;
  static const int _CLOCK_MONOTONIC_RAW = 4;
  static const int _CLOCK_MONOTONIC_RAW_APPROX = 5;
  static const int _CLOCK_UPTIME_RAW = 8;
  static const int _CLOCK_UPTIME_RAW_APPROX = 9;
  static const int _CLOCK_PROCESS_CPUTIME_ID = 12;
  static const int _CLOCK_THREAD_CPUTIME_ID = 16;
}

class timeval extends ffi.Struct {
  @ffi.Int64()
  external int tv_sec;

  @ffi.Int32()
  external int tv_usec;
}

class timeval64 extends ffi.Struct {
  @ffi.Int64()
  external int tv_sec;

  @ffi.Int64()
  external int tv_usec;
}

class itimerval extends ffi.Struct {
  external timeval it_interval;

  external timeval it_value;
}

class timezone_1 extends ffi.Struct {
  @ffi.Int32()
  external int tz_minuteswest;

  @ffi.Int32()
  external int tz_dsttime;
}

class clockinfo extends ffi.Struct {
  @ffi.Int32()
  external int hz;

  @ffi.Int32()
  external int tick;

  @ffi.Int32()
  external int tickadj;

  @ffi.Int32()
  external int stathz;

  @ffi.Int32()
  external int profhz;
}

abstract class curl_sslbackend {
  static const int CURLSSLBACKEND_NONE = 0;
  static const int CURLSSLBACKEND_OPENSSL = 1;
  static const int CURLSSLBACKEND_GNUTLS = 2;
  static const int CURLSSLBACKEND_NSS = 3;
  static const int CURLSSLBACKEND_OBSOLETE4 = 4;
  static const int CURLSSLBACKEND_GSKIT = 5;
  static const int CURLSSLBACKEND_POLARSSL = 6;
  static const int CURLSSLBACKEND_WOLFSSL = 7;
  static const int CURLSSLBACKEND_SCHANNEL = 8;
  static const int CURLSSLBACKEND_SECURETRANSPORT = 9;
  static const int CURLSSLBACKEND_AXTLS = 10;
  static const int CURLSSLBACKEND_MBEDTLS = 11;
  static const int CURLSSLBACKEND_MESALINK = 12;
  static const int CURLSSLBACKEND_BEARSSL = 13;
  static const int CURLSSLBACKEND_RUSTLS = 14;
}

class curl_slist extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> data;

  external ffi.Pointer<curl_slist> next;
}

class curl_httppost extends ffi.Struct {
  external ffi.Pointer<curl_httppost> next;

  external ffi.Pointer<ffi.Int8> name;

  @ffi.Int64()
  external int namelength;

  external ffi.Pointer<ffi.Int8> contents;

  @ffi.Int64()
  external int contentslength;

  external ffi.Pointer<ffi.Int8> buffer;

  @ffi.Int64()
  external int bufferlength;

  external ffi.Pointer<ffi.Int8> contenttype;

  external ffi.Pointer<curl_slist> contentheader;

  external ffi.Pointer<curl_httppost> more;

  @ffi.Int64()
  external int flags;

  external ffi.Pointer<ffi.Int8> showfilename;

  external ffi.Pointer<ffi.Void> userp;

  @ffi.Int64()
  external int contentlen;
}

abstract class curlfiletype {
  static const int CURLFILETYPE_FILE = 0;
  static const int CURLFILETYPE_DIRECTORY = 1;
  static const int CURLFILETYPE_SYMLINK = 2;
  static const int CURLFILETYPE_DEVICE_BLOCK = 3;
  static const int CURLFILETYPE_DEVICE_CHAR = 4;
  static const int CURLFILETYPE_NAMEDPIPE = 5;
  static const int CURLFILETYPE_SOCKET = 6;
  static const int CURLFILETYPE_DOOR = 7;
  static const int CURLFILETYPE_UNKNOWN = 8;
}

class unnamedStruct_1 extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> time;

  external ffi.Pointer<ffi.Int8> perm;

  external ffi.Pointer<ffi.Int8> user;

  external ffi.Pointer<ffi.Int8> group;

  external ffi.Pointer<ffi.Int8> target;
}

class curl_fileinfo extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> filename;

  @ffi.Int32()
  external int filetype;

  @ffi.Int64()
  external int time;

  @ffi.Uint32()
  external int perm;

  @ffi.Int32()
  external int uid;

  @ffi.Int32()
  external int gid;

  @ffi.Int64()
  external int size;

  @ffi.Int64()
  external int hardlinks;

  external unnamedStruct_1 strings;

  @ffi.Uint32()
  external int flags;

  external ffi.Pointer<ffi.Int8> b_data;

  @ffi.Uint64()
  external int b_size;

  @ffi.Uint64()
  external int b_used;
}

abstract class curlsocktype {
  static const int CURLSOCKTYPE_IPCXN = 0;
  static const int CURLSOCKTYPE_ACCEPT = 1;
  static const int CURLSOCKTYPE_LAST = 2;
}

class curl_sockaddr extends ffi.Struct {
  @ffi.Int32()
  external int family;

  @ffi.Int32()
  external int socktype;

  @ffi.Int32()
  external int protocol;

  @ffi.Uint32()
  external int addrlen;

  external sockaddr addr;
}

abstract class curlioerr {
  static const int CURLIOE_OK = 0;
  static const int CURLIOE_UNKNOWNCMD = 1;
  static const int CURLIOE_FAILRESTART = 2;
  static const int CURLIOE_LAST = 3;
}

abstract class curliocmd {
  static const int CURLIOCMD_NOP = 0;
  static const int CURLIOCMD_RESTARTREAD = 1;
  static const int CURLIOCMD_LAST = 2;
}

abstract class curl_infotype {
  static const int CURLINFO_TEXT = 0;
  static const int CURLINFO_HEADER_IN = 1;
  static const int CURLINFO_HEADER_OUT = 2;
  static const int CURLINFO_DATA_IN = 3;
  static const int CURLINFO_DATA_OUT = 4;
  static const int CURLINFO_SSL_DATA_IN = 5;
  static const int CURLINFO_SSL_DATA_OUT = 6;
  static const int CURLINFO_END = 7;
}

abstract class CURLcode {
  static const int CURLE_OK = 0;
  static const int CURLE_UNSUPPORTED_PROTOCOL = 1;
  static const int CURLE_FAILED_INIT = 2;
  static const int CURLE_URL_MALFORMAT = 3;
  static const int CURLE_NOT_BUILT_IN = 4;
  static const int CURLE_COULDNT_RESOLVE_PROXY = 5;
  static const int CURLE_COULDNT_RESOLVE_HOST = 6;
  static const int CURLE_COULDNT_CONNECT = 7;
  static const int CURLE_WEIRD_SERVER_REPLY = 8;
  static const int CURLE_REMOTE_ACCESS_DENIED = 9;
  static const int CURLE_FTP_ACCEPT_FAILED = 10;
  static const int CURLE_FTP_WEIRD_PASS_REPLY = 11;
  static const int CURLE_FTP_ACCEPT_TIMEOUT = 12;
  static const int CURLE_FTP_WEIRD_PASV_REPLY = 13;
  static const int CURLE_FTP_WEIRD_227_FORMAT = 14;
  static const int CURLE_FTP_CANT_GET_HOST = 15;
  static const int CURLE_HTTP2 = 16;
  static const int CURLE_FTP_COULDNT_SET_TYPE = 17;
  static const int CURLE_PARTIAL_FILE = 18;
  static const int CURLE_FTP_COULDNT_RETR_FILE = 19;
  static const int CURLE_OBSOLETE20 = 20;
  static const int CURLE_QUOTE_ERROR = 21;
  static const int CURLE_HTTP_RETURNED_ERROR = 22;
  static const int CURLE_WRITE_ERROR = 23;
  static const int CURLE_OBSOLETE24 = 24;
  static const int CURLE_UPLOAD_FAILED = 25;
  static const int CURLE_READ_ERROR = 26;
  static const int CURLE_OUT_OF_MEMORY = 27;
  static const int CURLE_OPERATION_TIMEDOUT = 28;
  static const int CURLE_OBSOLETE29 = 29;
  static const int CURLE_FTP_PORT_FAILED = 30;
  static const int CURLE_FTP_COULDNT_USE_REST = 31;
  static const int CURLE_OBSOLETE32 = 32;
  static const int CURLE_RANGE_ERROR = 33;
  static const int CURLE_HTTP_POST_ERROR = 34;
  static const int CURLE_SSL_CONNECT_ERROR = 35;
  static const int CURLE_BAD_DOWNLOAD_RESUME = 36;
  static const int CURLE_FILE_COULDNT_READ_FILE = 37;
  static const int CURLE_LDAP_CANNOT_BIND = 38;
  static const int CURLE_LDAP_SEARCH_FAILED = 39;
  static const int CURLE_OBSOLETE40 = 40;
  static const int CURLE_FUNCTION_NOT_FOUND = 41;
  static const int CURLE_ABORTED_BY_CALLBACK = 42;
  static const int CURLE_BAD_FUNCTION_ARGUMENT = 43;
  static const int CURLE_OBSOLETE44 = 44;
  static const int CURLE_INTERFACE_FAILED = 45;
  static const int CURLE_OBSOLETE46 = 46;
  static const int CURLE_TOO_MANY_REDIRECTS = 47;
  static const int CURLE_UNKNOWN_OPTION = 48;
  static const int CURLE_TELNET_OPTION_SYNTAX = 49;
  static const int CURLE_OBSOLETE50 = 50;
  static const int CURLE_OBSOLETE51 = 51;
  static const int CURLE_GOT_NOTHING = 52;
  static const int CURLE_SSL_ENGINE_NOTFOUND = 53;
  static const int CURLE_SSL_ENGINE_SETFAILED = 54;
  static const int CURLE_SEND_ERROR = 55;
  static const int CURLE_RECV_ERROR = 56;
  static const int CURLE_OBSOLETE57 = 57;
  static const int CURLE_SSL_CERTPROBLEM = 58;
  static const int CURLE_SSL_CIPHER = 59;
  static const int CURLE_PEER_FAILED_VERIFICATION = 60;
  static const int CURLE_BAD_CONTENT_ENCODING = 61;
  static const int CURLE_LDAP_INVALID_URL = 62;
  static const int CURLE_FILESIZE_EXCEEDED = 63;
  static const int CURLE_USE_SSL_FAILED = 64;
  static const int CURLE_SEND_FAIL_REWIND = 65;
  static const int CURLE_SSL_ENGINE_INITFAILED = 66;
  static const int CURLE_LOGIN_DENIED = 67;
  static const int CURLE_TFTP_NOTFOUND = 68;
  static const int CURLE_TFTP_PERM = 69;
  static const int CURLE_REMOTE_DISK_FULL = 70;
  static const int CURLE_TFTP_ILLEGAL = 71;
  static const int CURLE_TFTP_UNKNOWNID = 72;
  static const int CURLE_REMOTE_FILE_EXISTS = 73;
  static const int CURLE_TFTP_NOSUCHUSER = 74;
  static const int CURLE_CONV_FAILED = 75;
  static const int CURLE_CONV_REQD = 76;
  static const int CURLE_SSL_CACERT_BADFILE = 77;
  static const int CURLE_REMOTE_FILE_NOT_FOUND = 78;
  static const int CURLE_SSH = 79;
  static const int CURLE_SSL_SHUTDOWN_FAILED = 80;
  static const int CURLE_AGAIN = 81;
  static const int CURLE_SSL_CRL_BADFILE = 82;
  static const int CURLE_SSL_ISSUER_ERROR = 83;
  static const int CURLE_FTP_PRET_FAILED = 84;
  static const int CURLE_RTSP_CSEQ_ERROR = 85;
  static const int CURLE_RTSP_SESSION_ERROR = 86;
  static const int CURLE_FTP_BAD_FILE_LIST = 87;
  static const int CURLE_CHUNK_FAILED = 88;
  static const int CURLE_NO_CONNECTION_AVAILABLE = 89;
  static const int CURLE_SSL_PINNEDPUBKEYNOTMATCH = 90;
  static const int CURLE_SSL_INVALIDCERTSTATUS = 91;
  static const int CURLE_HTTP2_STREAM = 92;
  static const int CURLE_RECURSIVE_API_CALL = 93;
  static const int CURLE_AUTH_ERROR = 94;
  static const int CURLE_HTTP3 = 95;
  static const int CURLE_QUIC_CONNECT_ERROR = 96;
  static const int CURLE_PROXY = 97;
  static const int CURL_LAST = 98;
}

/// !CURL_NO_OLDIES
abstract class CURLproxycode {
  static const int CURLPX_OK = 0;
  static const int CURLPX_BAD_ADDRESS_TYPE = 1;
  static const int CURLPX_BAD_VERSION = 2;
  static const int CURLPX_CLOSED = 3;
  static const int CURLPX_GSSAPI = 4;
  static const int CURLPX_GSSAPI_PERMSG = 5;
  static const int CURLPX_GSSAPI_PROTECTION = 6;
  static const int CURLPX_IDENTD = 7;
  static const int CURLPX_IDENTD_DIFFER = 8;
  static const int CURLPX_LONG_HOSTNAME = 9;
  static const int CURLPX_LONG_PASSWD = 10;
  static const int CURLPX_LONG_USER = 11;
  static const int CURLPX_NO_AUTH = 12;
  static const int CURLPX_RECV_ADDRESS = 13;
  static const int CURLPX_RECV_AUTH = 14;
  static const int CURLPX_RECV_CONNECT = 15;
  static const int CURLPX_RECV_REQACK = 16;
  static const int CURLPX_REPLY_ADDRESS_TYPE_NOT_SUPPORTED = 17;
  static const int CURLPX_REPLY_COMMAND_NOT_SUPPORTED = 18;
  static const int CURLPX_REPLY_CONNECTION_REFUSED = 19;
  static const int CURLPX_REPLY_GENERAL_SERVER_FAILURE = 20;
  static const int CURLPX_REPLY_HOST_UNREACHABLE = 21;
  static const int CURLPX_REPLY_NETWORK_UNREACHABLE = 22;
  static const int CURLPX_REPLY_NOT_ALLOWED = 23;
  static const int CURLPX_REPLY_TTL_EXPIRED = 24;
  static const int CURLPX_REPLY_UNASSIGNED = 25;
  static const int CURLPX_REQUEST_FAILED = 26;
  static const int CURLPX_RESOLVE_HOST = 27;
  static const int CURLPX_SEND_AUTH = 28;
  static const int CURLPX_SEND_CONNECT = 29;
  static const int CURLPX_SEND_REQUEST = 30;
  static const int CURLPX_UNKNOWN_FAIL = 31;
  static const int CURLPX_UNKNOWN_MODE = 32;
  static const int CURLPX_USER_REJECTED = 33;
  static const int CURLPX_LAST = 34;
}

abstract class curl_proxytype {
  static const int CURLPROXY_HTTP = 0;
  static const int CURLPROXY_HTTP_1_0 = 1;
  static const int CURLPROXY_HTTPS = 2;
  static const int CURLPROXY_SOCKS4 = 4;
  static const int CURLPROXY_SOCKS5 = 5;
  static const int CURLPROXY_SOCKS4A = 6;
  static const int CURLPROXY_SOCKS5_HOSTNAME = 7;
}

abstract class curl_khtype {
  static const int CURLKHTYPE_UNKNOWN = 0;
  static const int CURLKHTYPE_RSA1 = 1;
  static const int CURLKHTYPE_RSA = 2;
  static const int CURLKHTYPE_DSS = 3;
  static const int CURLKHTYPE_ECDSA = 4;
  static const int CURLKHTYPE_ED25519 = 5;
}

class curl_khkey extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> key;

  @ffi.Uint64()
  external int len;

  @ffi.Int32()
  external int keytype;
}

abstract class curl_khstat {
  static const int CURLKHSTAT_FINE_ADD_TO_FILE = 0;
  static const int CURLKHSTAT_FINE = 1;
  static const int CURLKHSTAT_REJECT = 2;
  static const int CURLKHSTAT_DEFER = 3;
  static const int CURLKHSTAT_FINE_REPLACE = 4;
  static const int CURLKHSTAT_LAST = 5;
}

abstract class curl_khmatch {
  static const int CURLKHMATCH_OK = 0;
  static const int CURLKHMATCH_MISMATCH = 1;
  static const int CURLKHMATCH_MISSING = 2;
  static const int CURLKHMATCH_LAST = 3;
}

abstract class curl_usessl {
  static const int CURLUSESSL_NONE = 0;
  static const int CURLUSESSL_TRY = 1;
  static const int CURLUSESSL_CONTROL = 2;
  static const int CURLUSESSL_ALL = 3;
  static const int CURLUSESSL_LAST = 4;
}

/// !CURL_NO_OLDIES
abstract class curl_ftpccc {
  static const int CURLFTPSSL_CCC_NONE = 0;
  static const int CURLFTPSSL_CCC_PASSIVE = 1;
  static const int CURLFTPSSL_CCC_ACTIVE = 2;
  static const int CURLFTPSSL_CCC_LAST = 3;
}

abstract class curl_ftpauth {
  static const int CURLFTPAUTH_DEFAULT = 0;
  static const int CURLFTPAUTH_SSL = 1;
  static const int CURLFTPAUTH_TLS = 2;
  static const int CURLFTPAUTH_LAST = 3;
}

abstract class curl_ftpcreatedir {
  static const int CURLFTP_CREATE_DIR_NONE = 0;
  static const int CURLFTP_CREATE_DIR = 1;
  static const int CURLFTP_CREATE_DIR_RETRY = 2;
  static const int CURLFTP_CREATE_DIR_LAST = 3;
}

abstract class curl_ftpmethod {
  static const int CURLFTPMETHOD_DEFAULT = 0;
  static const int CURLFTPMETHOD_MULTICWD = 1;
  static const int CURLFTPMETHOD_NOCWD = 2;
  static const int CURLFTPMETHOD_SINGLECWD = 3;
  static const int CURLFTPMETHOD_LAST = 4;
}

class curl_hstsentry extends ffi.Opaque {}

class curl_index extends ffi.Struct {
  @ffi.Uint64()
  external int index;

  @ffi.Uint64()
  external int total;
}

abstract class CURLSTScode {
  static const int CURLSTS_OK = 0;
  static const int CURLSTS_DONE = 1;
  static const int CURLSTS_FAIL = 2;
}

abstract class CURLoption {
  static const int CURLOPT_WRITEDATA = 10001;
  static const int CURLOPT_URL = 10002;
  static const int CURLOPT_PORT = 3;
  static const int CURLOPT_PROXY = 10004;
  static const int CURLOPT_USERPWD = 10005;
  static const int CURLOPT_PROXYUSERPWD = 10006;
  static const int CURLOPT_RANGE = 10007;
  static const int CURLOPT_READDATA = 10009;
  static const int CURLOPT_ERRORBUFFER = 10010;
  static const int CURLOPT_WRITEFUNCTION = 20011;
  static const int CURLOPT_READFUNCTION = 20012;
  static const int CURLOPT_TIMEOUT = 13;
  static const int CURLOPT_INFILESIZE = 14;
  static const int CURLOPT_POSTFIELDS = 10015;
  static const int CURLOPT_REFERER = 10016;
  static const int CURLOPT_FTPPORT = 10017;
  static const int CURLOPT_USERAGENT = 10018;
  static const int CURLOPT_LOW_SPEED_LIMIT = 19;
  static const int CURLOPT_LOW_SPEED_TIME = 20;
  static const int CURLOPT_RESUME_FROM = 21;
  static const int CURLOPT_COOKIE = 10022;
  static const int CURLOPT_HTTPHEADER = 10023;
  static const int CURLOPT_HTTPPOST = 10024;
  static const int CURLOPT_SSLCERT = 10025;
  static const int CURLOPT_KEYPASSWD = 10026;
  static const int CURLOPT_CRLF = 27;
  static const int CURLOPT_QUOTE = 10028;
  static const int CURLOPT_HEADERDATA = 10029;
  static const int CURLOPT_COOKIEFILE = 10031;
  static const int CURLOPT_SSLVERSION = 32;
  static const int CURLOPT_TIMECONDITION = 33;
  static const int CURLOPT_TIMEVALUE = 34;
  static const int CURLOPT_CUSTOMREQUEST = 10036;
  static const int CURLOPT_STDERR = 10037;
  static const int CURLOPT_POSTQUOTE = 10039;
  static const int CURLOPT_OBSOLETE40 = 10040;
  static const int CURLOPT_VERBOSE = 41;
  static const int CURLOPT_HEADER = 42;
  static const int CURLOPT_NOPROGRESS = 43;
  static const int CURLOPT_NOBODY = 44;
  static const int CURLOPT_FAILONERROR = 45;
  static const int CURLOPT_UPLOAD = 46;
  static const int CURLOPT_POST = 47;
  static const int CURLOPT_DIRLISTONLY = 48;
  static const int CURLOPT_APPEND = 50;
  static const int CURLOPT_NETRC = 51;
  static const int CURLOPT_FOLLOWLOCATION = 52;
  static const int CURLOPT_TRANSFERTEXT = 53;
  static const int CURLOPT_PUT = 54;
  static const int CURLOPT_PROGRESSFUNCTION = 20056;
  static const int CURLOPT_XFERINFODATA = 10057;
  static const int CURLOPT_AUTOREFERER = 58;
  static const int CURLOPT_PROXYPORT = 59;
  static const int CURLOPT_POSTFIELDSIZE = 60;
  static const int CURLOPT_HTTPPROXYTUNNEL = 61;
  static const int CURLOPT_INTERFACE = 10062;
  static const int CURLOPT_KRBLEVEL = 10063;
  static const int CURLOPT_SSL_VERIFYPEER = 64;
  static const int CURLOPT_CAINFO = 10065;
  static const int CURLOPT_MAXREDIRS = 68;
  static const int CURLOPT_FILETIME = 69;
  static const int CURLOPT_TELNETOPTIONS = 10070;
  static const int CURLOPT_MAXCONNECTS = 71;
  static const int CURLOPT_OBSOLETE72 = 72;
  static const int CURLOPT_FRESH_CONNECT = 74;
  static const int CURLOPT_FORBID_REUSE = 75;
  static const int CURLOPT_RANDOM_FILE = 10076;
  static const int CURLOPT_EGDSOCKET = 10077;
  static const int CURLOPT_CONNECTTIMEOUT = 78;
  static const int CURLOPT_HEADERFUNCTION = 20079;
  static const int CURLOPT_HTTPGET = 80;
  static const int CURLOPT_SSL_VERIFYHOST = 81;
  static const int CURLOPT_COOKIEJAR = 10082;
  static const int CURLOPT_SSL_CIPHER_LIST = 10083;
  static const int CURLOPT_HTTP_VERSION = 84;
  static const int CURLOPT_FTP_USE_EPSV = 85;
  static const int CURLOPT_SSLCERTTYPE = 10086;
  static const int CURLOPT_SSLKEY = 10087;
  static const int CURLOPT_SSLKEYTYPE = 10088;
  static const int CURLOPT_SSLENGINE = 10089;
  static const int CURLOPT_SSLENGINE_DEFAULT = 90;
  static const int CURLOPT_DNS_USE_GLOBAL_CACHE = 91;
  static const int CURLOPT_DNS_CACHE_TIMEOUT = 92;
  static const int CURLOPT_PREQUOTE = 10093;
  static const int CURLOPT_DEBUGFUNCTION = 20094;
  static const int CURLOPT_DEBUGDATA = 10095;
  static const int CURLOPT_COOKIESESSION = 96;
  static const int CURLOPT_CAPATH = 10097;
  static const int CURLOPT_BUFFERSIZE = 98;
  static const int CURLOPT_NOSIGNAL = 99;
  static const int CURLOPT_SHARE = 10100;
  static const int CURLOPT_PROXYTYPE = 101;
  static const int CURLOPT_ACCEPT_ENCODING = 10102;
  static const int CURLOPT_PRIVATE = 10103;
  static const int CURLOPT_HTTP200ALIASES = 10104;
  static const int CURLOPT_UNRESTRICTED_AUTH = 105;
  static const int CURLOPT_FTP_USE_EPRT = 106;
  static const int CURLOPT_HTTPAUTH = 107;
  static const int CURLOPT_SSL_CTX_FUNCTION = 20108;
  static const int CURLOPT_SSL_CTX_DATA = 10109;
  static const int CURLOPT_FTP_CREATE_MISSING_DIRS = 110;
  static const int CURLOPT_PROXYAUTH = 111;
  static const int CURLOPT_FTP_RESPONSE_TIMEOUT = 112;
  static const int CURLOPT_IPRESOLVE = 113;
  static const int CURLOPT_MAXFILESIZE = 114;
  static const int CURLOPT_INFILESIZE_LARGE = 30115;
  static const int CURLOPT_RESUME_FROM_LARGE = 30116;
  static const int CURLOPT_MAXFILESIZE_LARGE = 30117;
  static const int CURLOPT_NETRC_FILE = 10118;
  static const int CURLOPT_USE_SSL = 119;
  static const int CURLOPT_POSTFIELDSIZE_LARGE = 30120;
  static const int CURLOPT_TCP_NODELAY = 121;
  static const int CURLOPT_FTPSSLAUTH = 129;
  static const int CURLOPT_IOCTLFUNCTION = 20130;
  static const int CURLOPT_IOCTLDATA = 10131;
  static const int CURLOPT_FTP_ACCOUNT = 10134;
  static const int CURLOPT_COOKIELIST = 10135;
  static const int CURLOPT_IGNORE_CONTENT_LENGTH = 136;
  static const int CURLOPT_FTP_SKIP_PASV_IP = 137;
  static const int CURLOPT_FTP_FILEMETHOD = 138;
  static const int CURLOPT_LOCALPORT = 139;
  static const int CURLOPT_LOCALPORTRANGE = 140;
  static const int CURLOPT_CONNECT_ONLY = 141;
  static const int CURLOPT_CONV_FROM_NETWORK_FUNCTION = 20142;
  static const int CURLOPT_CONV_TO_NETWORK_FUNCTION = 20143;
  static const int CURLOPT_CONV_FROM_UTF8_FUNCTION = 20144;
  static const int CURLOPT_MAX_SEND_SPEED_LARGE = 30145;
  static const int CURLOPT_MAX_RECV_SPEED_LARGE = 30146;
  static const int CURLOPT_FTP_ALTERNATIVE_TO_USER = 10147;
  static const int CURLOPT_SOCKOPTFUNCTION = 20148;
  static const int CURLOPT_SOCKOPTDATA = 10149;
  static const int CURLOPT_SSL_SESSIONID_CACHE = 150;
  static const int CURLOPT_SSH_AUTH_TYPES = 151;
  static const int CURLOPT_SSH_PUBLIC_KEYFILE = 10152;
  static const int CURLOPT_SSH_PRIVATE_KEYFILE = 10153;
  static const int CURLOPT_FTP_SSL_CCC = 154;
  static const int CURLOPT_TIMEOUT_MS = 155;
  static const int CURLOPT_CONNECTTIMEOUT_MS = 156;
  static const int CURLOPT_HTTP_TRANSFER_DECODING = 157;
  static const int CURLOPT_HTTP_CONTENT_DECODING = 158;
  static const int CURLOPT_NEW_FILE_PERMS = 159;
  static const int CURLOPT_NEW_DIRECTORY_PERMS = 160;
  static const int CURLOPT_POSTREDIR = 161;
  static const int CURLOPT_SSH_HOST_PUBLIC_KEY_MD5 = 10162;
  static const int CURLOPT_OPENSOCKETFUNCTION = 20163;
  static const int CURLOPT_OPENSOCKETDATA = 10164;
  static const int CURLOPT_COPYPOSTFIELDS = 10165;
  static const int CURLOPT_PROXY_TRANSFER_MODE = 166;
  static const int CURLOPT_SEEKFUNCTION = 20167;
  static const int CURLOPT_SEEKDATA = 10168;
  static const int CURLOPT_CRLFILE = 10169;
  static const int CURLOPT_ISSUERCERT = 10170;
  static const int CURLOPT_ADDRESS_SCOPE = 171;
  static const int CURLOPT_CERTINFO = 172;
  static const int CURLOPT_USERNAME = 10173;
  static const int CURLOPT_PASSWORD = 10174;
  static const int CURLOPT_PROXYUSERNAME = 10175;
  static const int CURLOPT_PROXYPASSWORD = 10176;
  static const int CURLOPT_NOPROXY = 10177;
  static const int CURLOPT_TFTP_BLKSIZE = 178;
  static const int CURLOPT_SOCKS5_GSSAPI_SERVICE = 10179;
  static const int CURLOPT_SOCKS5_GSSAPI_NEC = 180;
  static const int CURLOPT_PROTOCOLS = 181;
  static const int CURLOPT_REDIR_PROTOCOLS = 182;
  static const int CURLOPT_SSH_KNOWNHOSTS = 10183;
  static const int CURLOPT_SSH_KEYFUNCTION = 20184;
  static const int CURLOPT_SSH_KEYDATA = 10185;
  static const int CURLOPT_MAIL_FROM = 10186;
  static const int CURLOPT_MAIL_RCPT = 10187;
  static const int CURLOPT_FTP_USE_PRET = 188;
  static const int CURLOPT_RTSP_REQUEST = 189;
  static const int CURLOPT_RTSP_SESSION_ID = 10190;
  static const int CURLOPT_RTSP_STREAM_URI = 10191;
  static const int CURLOPT_RTSP_TRANSPORT = 10192;
  static const int CURLOPT_RTSP_CLIENT_CSEQ = 193;
  static const int CURLOPT_RTSP_SERVER_CSEQ = 194;
  static const int CURLOPT_INTERLEAVEDATA = 10195;
  static const int CURLOPT_INTERLEAVEFUNCTION = 20196;
  static const int CURLOPT_WILDCARDMATCH = 197;
  static const int CURLOPT_CHUNK_BGN_FUNCTION = 20198;
  static const int CURLOPT_CHUNK_END_FUNCTION = 20199;
  static const int CURLOPT_FNMATCH_FUNCTION = 20200;
  static const int CURLOPT_CHUNK_DATA = 10201;
  static const int CURLOPT_FNMATCH_DATA = 10202;
  static const int CURLOPT_RESOLVE = 10203;
  static const int CURLOPT_TLSAUTH_USERNAME = 10204;
  static const int CURLOPT_TLSAUTH_PASSWORD = 10205;
  static const int CURLOPT_TLSAUTH_TYPE = 10206;
  static const int CURLOPT_TRANSFER_ENCODING = 207;
  static const int CURLOPT_CLOSESOCKETFUNCTION = 20208;
  static const int CURLOPT_CLOSESOCKETDATA = 10209;
  static const int CURLOPT_GSSAPI_DELEGATION = 210;
  static const int CURLOPT_DNS_SERVERS = 10211;
  static const int CURLOPT_ACCEPTTIMEOUT_MS = 212;
  static const int CURLOPT_TCP_KEEPALIVE = 213;
  static const int CURLOPT_TCP_KEEPIDLE = 214;
  static const int CURLOPT_TCP_KEEPINTVL = 215;
  static const int CURLOPT_SSL_OPTIONS = 216;
  static const int CURLOPT_MAIL_AUTH = 10217;
  static const int CURLOPT_SASL_IR = 218;
  static const int CURLOPT_XFERINFOFUNCTION = 20219;
  static const int CURLOPT_XOAUTH2_BEARER = 10220;
  static const int CURLOPT_DNS_INTERFACE = 10221;
  static const int CURLOPT_DNS_LOCAL_IP4 = 10222;
  static const int CURLOPT_DNS_LOCAL_IP6 = 10223;
  static const int CURLOPT_LOGIN_OPTIONS = 10224;
  static const int CURLOPT_SSL_ENABLE_NPN = 225;
  static const int CURLOPT_SSL_ENABLE_ALPN = 226;
  static const int CURLOPT_EXPECT_100_TIMEOUT_MS = 227;
  static const int CURLOPT_PROXYHEADER = 10228;
  static const int CURLOPT_HEADEROPT = 229;
  static const int CURLOPT_PINNEDPUBLICKEY = 10230;
  static const int CURLOPT_UNIX_SOCKET_PATH = 10231;
  static const int CURLOPT_SSL_VERIFYSTATUS = 232;
  static const int CURLOPT_SSL_FALSESTART = 233;
  static const int CURLOPT_PATH_AS_IS = 234;
  static const int CURLOPT_PROXY_SERVICE_NAME = 10235;
  static const int CURLOPT_SERVICE_NAME = 10236;
  static const int CURLOPT_PIPEWAIT = 237;
  static const int CURLOPT_DEFAULT_PROTOCOL = 10238;
  static const int CURLOPT_STREAM_WEIGHT = 239;
  static const int CURLOPT_STREAM_DEPENDS = 10240;
  static const int CURLOPT_STREAM_DEPENDS_E = 10241;
  static const int CURLOPT_TFTP_NO_OPTIONS = 242;
  static const int CURLOPT_CONNECT_TO = 10243;
  static const int CURLOPT_TCP_FASTOPEN = 244;
  static const int CURLOPT_KEEP_SENDING_ON_ERROR = 245;
  static const int CURLOPT_PROXY_CAINFO = 10246;
  static const int CURLOPT_PROXY_CAPATH = 10247;
  static const int CURLOPT_PROXY_SSL_VERIFYPEER = 248;
  static const int CURLOPT_PROXY_SSL_VERIFYHOST = 249;
  static const int CURLOPT_PROXY_SSLVERSION = 250;
  static const int CURLOPT_PROXY_TLSAUTH_USERNAME = 10251;
  static const int CURLOPT_PROXY_TLSAUTH_PASSWORD = 10252;
  static const int CURLOPT_PROXY_TLSAUTH_TYPE = 10253;
  static const int CURLOPT_PROXY_SSLCERT = 10254;
  static const int CURLOPT_PROXY_SSLCERTTYPE = 10255;
  static const int CURLOPT_PROXY_SSLKEY = 10256;
  static const int CURLOPT_PROXY_SSLKEYTYPE = 10257;
  static const int CURLOPT_PROXY_KEYPASSWD = 10258;
  static const int CURLOPT_PROXY_SSL_CIPHER_LIST = 10259;
  static const int CURLOPT_PROXY_CRLFILE = 10260;
  static const int CURLOPT_PROXY_SSL_OPTIONS = 261;
  static const int CURLOPT_PRE_PROXY = 10262;
  static const int CURLOPT_PROXY_PINNEDPUBLICKEY = 10263;
  static const int CURLOPT_ABSTRACT_UNIX_SOCKET = 10264;
  static const int CURLOPT_SUPPRESS_CONNECT_HEADERS = 265;
  static const int CURLOPT_REQUEST_TARGET = 10266;
  static const int CURLOPT_SOCKS5_AUTH = 267;
  static const int CURLOPT_SSH_COMPRESSION = 268;
  static const int CURLOPT_MIMEPOST = 10269;
  static const int CURLOPT_TIMEVALUE_LARGE = 30270;
  static const int CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS = 271;
  static const int CURLOPT_RESOLVER_START_FUNCTION = 20272;
  static const int CURLOPT_RESOLVER_START_DATA = 10273;
  static const int CURLOPT_HAPROXYPROTOCOL = 274;
  static const int CURLOPT_DNS_SHUFFLE_ADDRESSES = 275;
  static const int CURLOPT_TLS13_CIPHERS = 10276;
  static const int CURLOPT_PROXY_TLS13_CIPHERS = 10277;
  static const int CURLOPT_DISALLOW_USERNAME_IN_URL = 278;
  static const int CURLOPT_DOH_URL = 10279;
  static const int CURLOPT_UPLOAD_BUFFERSIZE = 280;
  static const int CURLOPT_UPKEEP_INTERVAL_MS = 281;
  static const int CURLOPT_CURLU = 10282;
  static const int CURLOPT_TRAILERFUNCTION = 20283;
  static const int CURLOPT_TRAILERDATA = 10284;
  static const int CURLOPT_HTTP09_ALLOWED = 285;
  static const int CURLOPT_ALTSVC_CTRL = 286;
  static const int CURLOPT_ALTSVC = 10287;
  static const int CURLOPT_MAXAGE_CONN = 288;
  static const int CURLOPT_SASL_AUTHZID = 10289;
  static const int CURLOPT_MAIL_RCPT_ALLLOWFAILS = 290;
  static const int CURLOPT_SSLCERT_BLOB = 40291;
  static const int CURLOPT_SSLKEY_BLOB = 40292;
  static const int CURLOPT_PROXY_SSLCERT_BLOB = 40293;
  static const int CURLOPT_PROXY_SSLKEY_BLOB = 40294;
  static const int CURLOPT_ISSUERCERT_BLOB = 40295;
  static const int CURLOPT_PROXY_ISSUERCERT = 10296;
  static const int CURLOPT_PROXY_ISSUERCERT_BLOB = 40297;
  static const int CURLOPT_SSL_EC_CURVES = 10298;
  static const int CURLOPT_HSTS_CTRL = 299;
  static const int CURLOPT_HSTS = 10300;
  static const int CURLOPT_HSTSREADFUNCTION = 20301;
  static const int CURLOPT_HSTSREADDATA = 10302;
  static const int CURLOPT_HSTSWRITEFUNCTION = 20303;
  static const int CURLOPT_HSTSWRITEDATA = 10304;
  static const int CURLOPT_AWS_SIGV4 = 10305;
  static const int CURLOPT_DOH_SSL_VERIFYPEER = 306;
  static const int CURLOPT_DOH_SSL_VERIFYHOST = 307;
  static const int CURLOPT_DOH_SSL_VERIFYSTATUS = 308;
  static const int CURLOPT_LASTENTRY = 309;
}

abstract class CURL_NETRC_OPTION {
  static const int CURL_NETRC_IGNORED = 0;
  static const int CURL_NETRC_OPTIONAL = 1;
  static const int CURL_NETRC_REQUIRED = 2;
  static const int CURL_NETRC_LAST = 3;
}

abstract class CURL_TLSAUTH {
  static const int CURL_TLSAUTH_NONE = 0;
  static const int CURL_TLSAUTH_SRP = 1;
  static const int CURL_TLSAUTH_LAST = 2;
}

abstract class curl_TimeCond {
  static const int CURL_TIMECOND_NONE = 0;
  static const int CURL_TIMECOND_IFMODSINCE = 1;
  static const int CURL_TIMECOND_IFUNMODSINCE = 2;
  static const int CURL_TIMECOND_LASTMOD = 3;
  static const int CURL_TIMECOND_LAST = 4;
}

class curl_mime extends ffi.Opaque {}

class curl_mimepart extends ffi.Opaque {}

abstract class CURLformoption {
  static const int CURLFORM_NOTHING = 0;

  /// the first one is unused
  static const int CURLFORM_COPYNAME = 1;
  static const int CURLFORM_PTRNAME = 2;
  static const int CURLFORM_NAMELENGTH = 3;
  static const int CURLFORM_COPYCONTENTS = 4;
  static const int CURLFORM_PTRCONTENTS = 5;
  static const int CURLFORM_CONTENTSLENGTH = 6;
  static const int CURLFORM_FILECONTENT = 7;
  static const int CURLFORM_ARRAY = 8;
  static const int CURLFORM_OBSOLETE = 9;
  static const int CURLFORM_FILE = 10;
  static const int CURLFORM_BUFFER = 11;
  static const int CURLFORM_BUFFERPTR = 12;
  static const int CURLFORM_BUFFERLENGTH = 13;
  static const int CURLFORM_CONTENTTYPE = 14;
  static const int CURLFORM_CONTENTHEADER = 15;
  static const int CURLFORM_FILENAME = 16;
  static const int CURLFORM_END = 17;
  static const int CURLFORM_OBSOLETE2 = 18;
  static const int CURLFORM_STREAM = 19;
  static const int CURLFORM_CONTENTLEN = 20;
  static const int CURLFORM_LASTENTRY = 21;
}

class curl_forms extends ffi.Struct {
  @ffi.Int32()
  external int option;

  external ffi.Pointer<ffi.Int8> value;
}

abstract class CURLFORMcode {
  static const int CURL_FORMADD_OK = 0;
  static const int CURL_FORMADD_MEMORY = 1;
  static const int CURL_FORMADD_OPTION_TWICE = 2;
  static const int CURL_FORMADD_NULL = 3;
  static const int CURL_FORMADD_UNKNOWN_OPTION = 4;
  static const int CURL_FORMADD_INCOMPLETE = 5;
  static const int CURL_FORMADD_ILLEGAL_ARRAY = 6;
  static const int CURL_FORMADD_DISABLED = 7;
  static const int CURL_FORMADD_LAST = 8;
}

class curl_ssl_backend extends ffi.Struct {
  @ffi.Int32()
  external int id;

  external ffi.Pointer<ffi.Int8> name;
}

abstract class CURLsslset {
  static const int CURLSSLSET_OK = 0;
  static const int CURLSSLSET_UNKNOWN_BACKEND = 1;
  static const int CURLSSLSET_TOO_LATE = 2;
  static const int CURLSSLSET_NO_BACKENDS = 3;
}

class curl_certinfo extends ffi.Struct {
  @ffi.Int32()
  external int num_of_certs;

  external ffi.Pointer<ffi.Pointer<curl_slist>> certinfo;
}

class curl_tlssessioninfo extends ffi.Struct {
  @ffi.Int32()
  external int backend;

  external ffi.Pointer<ffi.Void> internals;
}

abstract class CURLINFO {
  static const int CURLINFO_NONE = 0;
  static const int CURLINFO_EFFECTIVE_URL = 1048577;
  static const int CURLINFO_RESPONSE_CODE = 2097154;
  static const int CURLINFO_TOTAL_TIME = 3145731;
  static const int CURLINFO_NAMELOOKUP_TIME = 3145732;
  static const int CURLINFO_CONNECT_TIME = 3145733;
  static const int CURLINFO_PRETRANSFER_TIME = 3145734;
  static const int CURLINFO_SIZE_UPLOAD = 3145735;
  static const int CURLINFO_SIZE_UPLOAD_T = 6291463;
  static const int CURLINFO_SIZE_DOWNLOAD = 3145736;
  static const int CURLINFO_SIZE_DOWNLOAD_T = 6291464;
  static const int CURLINFO_SPEED_DOWNLOAD = 3145737;
  static const int CURLINFO_SPEED_DOWNLOAD_T = 6291465;
  static const int CURLINFO_SPEED_UPLOAD = 3145738;
  static const int CURLINFO_SPEED_UPLOAD_T = 6291466;
  static const int CURLINFO_HEADER_SIZE = 2097163;
  static const int CURLINFO_REQUEST_SIZE = 2097164;
  static const int CURLINFO_SSL_VERIFYRESULT = 2097165;
  static const int CURLINFO_FILETIME = 2097166;
  static const int CURLINFO_FILETIME_T = 6291470;
  static const int CURLINFO_CONTENT_LENGTH_DOWNLOAD = 3145743;
  static const int CURLINFO_CONTENT_LENGTH_DOWNLOAD_T = 6291471;
  static const int CURLINFO_CONTENT_LENGTH_UPLOAD = 3145744;
  static const int CURLINFO_CONTENT_LENGTH_UPLOAD_T = 6291472;
  static const int CURLINFO_STARTTRANSFER_TIME = 3145745;
  static const int CURLINFO_CONTENT_TYPE = 1048594;
  static const int CURLINFO_REDIRECT_TIME = 3145747;
  static const int CURLINFO_REDIRECT_COUNT = 2097172;
  static const int CURLINFO_PRIVATE = 1048597;
  static const int CURLINFO_HTTP_CONNECTCODE = 2097174;
  static const int CURLINFO_HTTPAUTH_AVAIL = 2097175;
  static const int CURLINFO_PROXYAUTH_AVAIL = 2097176;
  static const int CURLINFO_OS_ERRNO = 2097177;
  static const int CURLINFO_NUM_CONNECTS = 2097178;
  static const int CURLINFO_SSL_ENGINES = 4194331;
  static const int CURLINFO_COOKIELIST = 4194332;
  static const int CURLINFO_LASTSOCKET = 2097181;
  static const int CURLINFO_FTP_ENTRY_PATH = 1048606;
  static const int CURLINFO_REDIRECT_URL = 1048607;
  static const int CURLINFO_PRIMARY_IP = 1048608;
  static const int CURLINFO_APPCONNECT_TIME = 3145761;
  static const int CURLINFO_CERTINFO = 4194338;
  static const int CURLINFO_CONDITION_UNMET = 2097187;
  static const int CURLINFO_RTSP_SESSION_ID = 1048612;
  static const int CURLINFO_RTSP_CLIENT_CSEQ = 2097189;
  static const int CURLINFO_RTSP_SERVER_CSEQ = 2097190;
  static const int CURLINFO_RTSP_CSEQ_RECV = 2097191;
  static const int CURLINFO_PRIMARY_PORT = 2097192;
  static const int CURLINFO_LOCAL_IP = 1048617;
  static const int CURLINFO_LOCAL_PORT = 2097194;
  static const int CURLINFO_TLS_SESSION = 4194347;
  static const int CURLINFO_ACTIVESOCKET = 5242924;
  static const int CURLINFO_TLS_SSL_PTR = 4194349;
  static const int CURLINFO_HTTP_VERSION = 2097198;
  static const int CURLINFO_PROXY_SSL_VERIFYRESULT = 2097199;
  static const int CURLINFO_PROTOCOL = 2097200;
  static const int CURLINFO_SCHEME = 1048625;
  static const int CURLINFO_TOTAL_TIME_T = 6291506;
  static const int CURLINFO_NAMELOOKUP_TIME_T = 6291507;
  static const int CURLINFO_CONNECT_TIME_T = 6291508;
  static const int CURLINFO_PRETRANSFER_TIME_T = 6291509;
  static const int CURLINFO_STARTTRANSFER_TIME_T = 6291510;
  static const int CURLINFO_REDIRECT_TIME_T = 6291511;
  static const int CURLINFO_APPCONNECT_TIME_T = 6291512;
  static const int CURLINFO_RETRY_AFTER = 6291513;
  static const int CURLINFO_EFFECTIVE_METHOD = 1048634;
  static const int CURLINFO_PROXY_ERROR = 2097211;
  static const int CURLINFO_REFERER = 1048636;
  static const int CURLINFO_LASTONE = 60;
}

abstract class curl_closepolicy {
  static const int CURLCLOSEPOLICY_NONE = 0;
  static const int CURLCLOSEPOLICY_OLDEST = 1;
  static const int CURLCLOSEPOLICY_LEAST_RECENTLY_USED = 2;
  static const int CURLCLOSEPOLICY_LEAST_TRAFFIC = 3;
  static const int CURLCLOSEPOLICY_SLOWEST = 4;
  static const int CURLCLOSEPOLICY_CALLBACK = 5;
  static const int CURLCLOSEPOLICY_LAST = 6;
}

/// Setup defines, protos etc for the sharing stuff.
abstract class curl_lock_data {
  static const int CURL_LOCK_DATA_NONE = 0;
  static const int CURL_LOCK_DATA_SHARE = 1;
  static const int CURL_LOCK_DATA_COOKIE = 2;
  static const int CURL_LOCK_DATA_DNS = 3;
  static const int CURL_LOCK_DATA_SSL_SESSION = 4;
  static const int CURL_LOCK_DATA_CONNECT = 5;
  static const int CURL_LOCK_DATA_PSL = 6;
  static const int CURL_LOCK_DATA_LAST = 7;
}

abstract class curl_lock_access {
  static const int CURL_LOCK_ACCESS_NONE = 0;
  static const int CURL_LOCK_ACCESS_SHARED = 1;
  static const int CURL_LOCK_ACCESS_SINGLE = 2;
  static const int CURL_LOCK_ACCESS_LAST = 3;
}

abstract class CURLSHcode {
  static const int CURLSHE_OK = 0;
  static const int CURLSHE_BAD_OPTION = 1;
  static const int CURLSHE_IN_USE = 2;
  static const int CURLSHE_INVALID = 3;
  static const int CURLSHE_NOMEM = 4;
  static const int CURLSHE_NOT_BUILT_IN = 5;
  static const int CURLSHE_LAST = 6;
}

abstract class CURLSHoption {
  static const int CURLSHOPT_NONE = 0;
  static const int CURLSHOPT_SHARE = 1;
  static const int CURLSHOPT_UNSHARE = 2;
  static const int CURLSHOPT_LOCKFUNC = 3;
  static const int CURLSHOPT_UNLOCKFUNC = 4;
  static const int CURLSHOPT_USERDATA = 5;
  static const int CURLSHOPT_LAST = 6;
}

/// Structures for querying information about the curl library at runtime.
abstract class CURLversion {
  static const int CURLVERSION_FIRST = 0;
  static const int CURLVERSION_SECOND = 1;
  static const int CURLVERSION_THIRD = 2;
  static const int CURLVERSION_FOURTH = 3;
  static const int CURLVERSION_FIFTH = 4;
  static const int CURLVERSION_SIXTH = 5;
  static const int CURLVERSION_SEVENTH = 6;
  static const int CURLVERSION_EIGHTH = 7;
  static const int CURLVERSION_NINTH = 8;
  static const int CURLVERSION_LAST = 9;
}

class curl_version_info_data extends ffi.Struct {
  @ffi.Int32()
  external int age;

  external ffi.Pointer<ffi.Int8> version;

  @ffi.Uint32()
  external int version_num;

  external ffi.Pointer<ffi.Int8> host;

  @ffi.Int32()
  external int features;

  external ffi.Pointer<ffi.Int8> ssl_version;

  @ffi.Int64()
  external int ssl_version_num;

  external ffi.Pointer<ffi.Int8> libz_version;

  external ffi.Pointer<ffi.Pointer<ffi.Int8>> protocols;

  external ffi.Pointer<ffi.Int8> ares;

  @ffi.Int32()
  external int ares_num;

  external ffi.Pointer<ffi.Int8> libidn;

  @ffi.Int32()
  external int iconv_ver_num;

  external ffi.Pointer<ffi.Int8> libssh_version;

  @ffi.Uint32()
  external int brotli_ver_num;

  external ffi.Pointer<ffi.Int8> brotli_version;

  @ffi.Uint32()
  external int nghttp2_ver_num;

  external ffi.Pointer<ffi.Int8> nghttp2_version;

  external ffi.Pointer<ffi.Int8> quic_version;

  external ffi.Pointer<ffi.Int8> cainfo;

  external ffi.Pointer<ffi.Int8> capath;

  @ffi.Uint32()
  external int zstd_ver_num;

  external ffi.Pointer<ffi.Int8> zstd_version;

  external ffi.Pointer<ffi.Int8> hyper_version;
}

class curl_blob extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @ffi.Uint64()
  external int len;

  @ffi.Uint32()
  external int flags;
}

abstract class CURLMcode {
  static const int CURLM_CALL_MULTI_PERFORM = -1;
  static const int CURLM_OK = 0;
  static const int CURLM_BAD_HANDLE = 1;
  static const int CURLM_BAD_EASY_HANDLE = 2;
  static const int CURLM_OUT_OF_MEMORY = 3;
  static const int CURLM_INTERNAL_ERROR = 4;
  static const int CURLM_BAD_SOCKET = 5;
  static const int CURLM_UNKNOWN_OPTION = 6;
  static const int CURLM_ADDED_ALREADY = 7;
  static const int CURLM_RECURSIVE_API_CALL = 8;
  static const int CURLM_WAKEUP_FAILURE = 9;
  static const int CURLM_BAD_FUNCTION_ARGUMENT = 10;
  static const int CURLM_LAST = 11;
}

abstract class CURLMSG {
  static const int CURLMSG_NONE = 0;
  static const int CURLMSG_DONE = 1;
  static const int CURLMSG_LAST = 2;
}

class CURLMsg extends ffi.Opaque {}

class curl_waitfd extends ffi.Struct {
  @ffi.Int32()
  external int fd;

  @ffi.Int16()
  external int events;

  @ffi.Int16()
  external int revents;
}

abstract class CURLMoption {
  static const int CURLMOPT_SOCKETFUNCTION = 20001;
  static const int CURLMOPT_SOCKETDATA = 10002;
  static const int CURLMOPT_PIPELINING = 3;
  static const int CURLMOPT_TIMERFUNCTION = 20004;
  static const int CURLMOPT_TIMERDATA = 10005;
  static const int CURLMOPT_MAXCONNECTS = 6;
  static const int CURLMOPT_MAX_HOST_CONNECTIONS = 7;
  static const int CURLMOPT_MAX_PIPELINE_LENGTH = 8;
  static const int CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE = 30009;
  static const int CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE = 30010;
  static const int CURLMOPT_PIPELINING_SITE_BL = 10011;
  static const int CURLMOPT_PIPELINING_SERVER_BL = 10012;
  static const int CURLMOPT_MAX_TOTAL_CONNECTIONS = 13;
  static const int CURLMOPT_PUSHFUNCTION = 20014;
  static const int CURLMOPT_PUSHDATA = 10015;
  static const int CURLMOPT_MAX_CONCURRENT_STREAMS = 16;
  static const int CURLMOPT_LASTENTRY = 17;
}

class curl_pushheaders extends ffi.Opaque {}

abstract class CURLUcode {
  static const int CURLUE_OK = 0;
  static const int CURLUE_BAD_HANDLE = 1;
  static const int CURLUE_BAD_PARTPOINTER = 2;
  static const int CURLUE_MALFORMED_INPUT = 3;
  static const int CURLUE_BAD_PORT_NUMBER = 4;
  static const int CURLUE_UNSUPPORTED_SCHEME = 5;
  static const int CURLUE_URLDECODE = 6;
  static const int CURLUE_OUT_OF_MEMORY = 7;
  static const int CURLUE_USER_NOT_ALLOWED = 8;
  static const int CURLUE_UNKNOWN_PART = 9;
  static const int CURLUE_NO_SCHEME = 10;
  static const int CURLUE_NO_USER = 11;
  static const int CURLUE_NO_PASSWORD = 12;
  static const int CURLUE_NO_OPTIONS = 13;
  static const int CURLUE_NO_HOST = 14;
  static const int CURLUE_NO_PORT = 15;
  static const int CURLUE_NO_QUERY = 16;
  static const int CURLUE_NO_FRAGMENT = 17;
}

abstract class CURLUPart {
  static const int CURLUPART_URL = 0;
  static const int CURLUPART_SCHEME = 1;
  static const int CURLUPART_USER = 2;
  static const int CURLUPART_PASSWORD = 3;
  static const int CURLUPART_OPTIONS = 4;
  static const int CURLUPART_HOST = 5;
  static const int CURLUPART_PORT = 6;
  static const int CURLUPART_PATH = 7;
  static const int CURLUPART_QUERY = 8;
  static const int CURLUPART_FRAGMENT = 9;
  static const int CURLUPART_ZONEID = 10;
}

class Curl_URL extends ffi.Opaque {}

const int CURL_HTTP_VERSION_NONE = 0;

const int CURL_HTTP_VERSION_1_0 = 1;

const int CURL_HTTP_VERSION_1_1 = 2;

const int CURL_HTTP_VERSION_2_0 = 3;

const int CURL_HTTP_VERSION_2TLS = 4;

const int CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE = 5;

const int CURL_HTTP_VERSION_3 = 30;

const int CURL_HTTP_VERSION_LAST = 31;

const int CURL_RTSPREQ_NONE = 0;

const int CURL_RTSPREQ_OPTIONS = 1;

const int CURL_RTSPREQ_DESCRIBE = 2;

const int CURL_RTSPREQ_ANNOUNCE = 3;

const int CURL_RTSPREQ_SETUP = 4;

const int CURL_RTSPREQ_PLAY = 5;

const int CURL_RTSPREQ_PAUSE = 6;

const int CURL_RTSPREQ_TEARDOWN = 7;

const int CURL_RTSPREQ_GET_PARAMETER = 8;

const int CURL_RTSPREQ_SET_PARAMETER = 9;

const int CURL_RTSPREQ_RECORD = 10;

const int CURL_RTSPREQ_RECEIVE = 11;

const int CURL_RTSPREQ_LAST = 12;

const int CURL_SSLVERSION_DEFAULT = 0;

const int CURL_SSLVERSION_TLSv1 = 1;

const int CURL_SSLVERSION_SSLv2 = 2;

const int CURL_SSLVERSION_SSLv3 = 3;

const int CURL_SSLVERSION_TLSv1_0 = 4;

const int CURL_SSLVERSION_TLSv1_1 = 5;

const int CURL_SSLVERSION_TLSv1_2 = 6;

const int CURL_SSLVERSION_TLSv1_3 = 7;

const int CURL_SSLVERSION_LAST = 8;

const int CURL_SSLVERSION_MAX_NONE = 0;

const int CURL_SSLVERSION_MAX_DEFAULT = 65536;

const int CURL_SSLVERSION_MAX_TLSv1_0 = 262144;

const int CURL_SSLVERSION_MAX_TLSv1_1 = 327680;

const int CURL_SSLVERSION_MAX_TLSv1_2 = 393216;

const int CURL_SSLVERSION_MAX_TLSv1_3 = 458752;

const int CURL_SSLVERSION_MAX_LAST = 524288;

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_64_BIT_INO_T = '\$INODE64';

const String __DARWIN_SUF_1050 = '\$1050';

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int USER_ADDR_NULL = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int _QUAD_HIGHWORD = 1;

const int _QUAD_LOWWORD = 0;

const int __DARWIN_LITTLE_ENDIAN = 1234;

const int __DARWIN_BIG_ENDIAN = 4321;

const int __DARWIN_PDP_ENDIAN = 3412;

const int __DARWIN_BYTE_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int __API_TO_BE_DEPRECATED = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __MAC_11_3 = 110300;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __IPHONE_14_5 = 140500;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __TVOS_14_5 = 140500;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int __WATCHOS_7_3 = 70300;

const int __WATCHOS_7_4 = 70400;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 110000;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 110300;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int __DARWIN_FD_SETSIZE = 1024;

const int __DARWIN_NBBY = 8;

const int __DARWIN_NFDBITS = 32;

const int NBBY = 8;

const int NFDBITS = 32;

const int FD_SETSIZE = 1024;

const int CURLOT_FLAG_ALIAS = 1;

const int __GNUC_VA_LIST = 1;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int NULL = 0;

const int RENAME_SECLUDE = 1;

const int RENAME_SWAP = 2;

const int RENAME_EXCL = 4;

const int __SLBF = 1;

const int __SNBF = 2;

const int __SRD = 4;

const int __SWR = 8;

const int __SRW = 16;

const int __SEOF = 32;

const int __SERR = 64;

const int __SMBF = 128;

const int __SAPP = 256;

const int __SSTR = 512;

const int __SOPT = 1024;

const int __SNPT = 2048;

const int __SOFF = 4096;

const int __SMOD = 8192;

const int __SALC = 16384;

const int __SIGN = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 1024;

const int EOF = -1;

const int FOPEN_MAX = 20;

const int FILENAME_MAX = 1024;

const String P_tmpdir = '/var/tmp/';

const int L_tmpnam = 1024;

const int TMP_MAX = 308915776;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int L_ctermid = 1024;

const String LIBCURL_COPYRIGHT =
    '1996 - 2021 Daniel Stenberg, <daniel@haxx.se>.';

const String LIBCURL_VERSION = '7.76.1';

const int LIBCURL_VERSION_MAJOR = 7;

const int LIBCURL_VERSION_MINOR = 76;

const int LIBCURL_VERSION_PATCH = 1;

const int LIBCURL_VERSION_NUM = 478209;

const String LIBCURL_TIMESTAMP = '2021-04-14';

const String CURL_FORMAT_CURL_OFF_T = 'ld';

const String CURL_FORMAT_CURL_OFF_TU = 'lu';

const int CURL_PULL_SYS_TYPES_H = 1;

const int CURL_PULL_SYS_SOCKET_H = 1;

const int __DARWIN_ALIGNBYTES = 7;

const int __DARWIN_ALIGNBYTES32 = 3;

const int KEV_INET_SUBCLASS = 1;

const int KEV_INET_NEW_ADDR = 1;

const int KEV_INET_CHANGED_ADDR = 2;

const int KEV_INET_ADDR_DELETED = 3;

const int KEV_INET_SIFDSTADDR = 4;

const int KEV_INET_SIFBRDADDR = 5;

const int KEV_INET_SIFNETMASK = 6;

const int KEV_INET_ARPCOLLISION = 7;

const int KEV_INET_PORTINUSE = 8;

const int KEV_INET_ARPRTRFAILURE = 9;

const int KEV_INET_ARPRTRALIVE = 10;

const int KEV_DL_SUBCLASS = 2;

const int KEV_DL_SIFFLAGS = 1;

const int KEV_DL_SIFMETRICS = 2;

const int KEV_DL_SIFMTU = 3;

const int KEV_DL_SIFPHYS = 4;

const int KEV_DL_SIFMEDIA = 5;

const int KEV_DL_SIFGENERIC = 6;

const int KEV_DL_ADDMULTI = 7;

const int KEV_DL_DELMULTI = 8;

const int KEV_DL_IF_ATTACHED = 9;

const int KEV_DL_IF_DETACHING = 10;

const int KEV_DL_IF_DETACHED = 11;

const int KEV_DL_LINK_OFF = 12;

const int KEV_DL_LINK_ON = 13;

const int KEV_DL_PROTO_ATTACHED = 14;

const int KEV_DL_PROTO_DETACHED = 15;

const int KEV_DL_LINK_ADDRESS_CHANGED = 16;

const int KEV_DL_WAKEFLAGS_CHANGED = 17;

const int KEV_DL_IF_IDLE_ROUTE_REFCNT = 18;

const int KEV_DL_IFCAP_CHANGED = 19;

const int KEV_DL_LINK_QUALITY_METRIC_CHANGED = 20;

const int KEV_DL_NODE_PRESENCE = 21;

const int KEV_DL_NODE_ABSENCE = 22;

const int KEV_DL_MASTER_ELECTED = 23;

const int KEV_DL_ISSUES = 24;

const int KEV_DL_IFDELEGATE_CHANGED = 25;

const int KEV_DL_AWDL_RESTRICTED = 26;

const int KEV_DL_AWDL_UNRESTRICTED = 27;

const int KEV_DL_RRC_STATE_CHANGED = 28;

const int KEV_DL_QOS_MODE_CHANGED = 29;

const int KEV_DL_LOW_POWER_MODE_CHANGED = 30;

const int KEV_INET6_SUBCLASS = 6;

const int KEV_INET6_NEW_USER_ADDR = 1;

const int KEV_INET6_CHANGED_ADDR = 2;

const int KEV_INET6_ADDR_DELETED = 3;

const int KEV_INET6_NEW_LL_ADDR = 4;

const int KEV_INET6_NEW_RTADV_ADDR = 5;

const int KEV_INET6_DEFROUTER = 6;

const int KEV_INET6_REQUEST_NAT64_PREFIX = 7;

const int SOCK_STREAM = 1;

const int SOCK_DGRAM = 2;

const int SOCK_RAW = 3;

const int SOCK_RDM = 4;

const int SOCK_SEQPACKET = 5;

const int SO_DEBUG = 1;

const int SO_ACCEPTCONN = 2;

const int SO_REUSEADDR = 4;

const int SO_KEEPALIVE = 8;

const int SO_DONTROUTE = 16;

const int SO_BROADCAST = 32;

const int SO_USELOOPBACK = 64;

const int SO_LINGER = 128;

const int SO_OOBINLINE = 256;

const int SO_REUSEPORT = 512;

const int SO_TIMESTAMP = 1024;

const int SO_TIMESTAMP_MONOTONIC = 2048;

const int SO_DONTTRUNC = 8192;

const int SO_WANTMORE = 16384;

const int SO_WANTOOBFLAG = 32768;

const int SO_SNDBUF = 4097;

const int SO_RCVBUF = 4098;

const int SO_SNDLOWAT = 4099;

const int SO_RCVLOWAT = 4100;

const int SO_SNDTIMEO = 4101;

const int SO_RCVTIMEO = 4102;

const int SO_ERROR = 4103;

const int SO_TYPE = 4104;

const int SO_LABEL = 4112;

const int SO_PEERLABEL = 4113;

const int SO_NREAD = 4128;

const int SO_NKE = 4129;

const int SO_NOSIGPIPE = 4130;

const int SO_NOADDRERR = 4131;

const int SO_NWRITE = 4132;

const int SO_REUSESHAREUID = 4133;

const int SO_NOTIFYCONFLICT = 4134;

const int SO_UPCALLCLOSEWAIT = 4135;

const int SO_LINGER_SEC = 4224;

const int SO_RANDOMPORT = 4226;

const int SO_NP_EXTENSIONS = 4227;

const int SO_NUMRCVPKT = 4370;

const int SO_NET_SERVICE_TYPE = 4374;

const int SO_NETSVC_MARKING_LEVEL = 4377;

const int NET_SERVICE_TYPE_BE = 0;

const int NET_SERVICE_TYPE_BK = 1;

const int NET_SERVICE_TYPE_SIG = 2;

const int NET_SERVICE_TYPE_VI = 3;

const int NET_SERVICE_TYPE_VO = 4;

const int NET_SERVICE_TYPE_RV = 5;

const int NET_SERVICE_TYPE_AV = 6;

const int NET_SERVICE_TYPE_OAM = 7;

const int NET_SERVICE_TYPE_RD = 8;

const int NETSVC_MRKNG_UNKNOWN = 0;

const int NETSVC_MRKNG_LVL_L2 = 1;

const int NETSVC_MRKNG_LVL_L3L2_ALL = 2;

const int NETSVC_MRKNG_LVL_L3L2_BK = 3;

const int SAE_ASSOCID_ANY = 0;

const int SAE_ASSOCID_ALL = 4294967295;

const int SAE_CONNID_ANY = 0;

const int SAE_CONNID_ALL = 4294967295;

const int CONNECT_RESUME_ON_READ_WRITE = 1;

const int CONNECT_DATA_IDEMPOTENT = 2;

const int CONNECT_DATA_AUTHENTICATED = 4;

const int SONPX_SETOPTSHUT = 1;

const int SOL_SOCKET = 65535;

const int AF_UNSPEC = 0;

const int AF_UNIX = 1;

const int AF_LOCAL = 1;

const int AF_INET = 2;

const int AF_IMPLINK = 3;

const int AF_PUP = 4;

const int AF_CHAOS = 5;

const int AF_NS = 6;

const int AF_ISO = 7;

const int AF_OSI = 7;

const int AF_ECMA = 8;

const int AF_DATAKIT = 9;

const int AF_CCITT = 10;

const int AF_SNA = 11;

const int AF_DECnet = 12;

const int AF_DLI = 13;

const int AF_LAT = 14;

const int AF_HYLINK = 15;

const int AF_APPLETALK = 16;

const int AF_ROUTE = 17;

const int AF_LINK = 18;

const int pseudo_AF_XTP = 19;

const int AF_COIP = 20;

const int AF_CNT = 21;

const int pseudo_AF_RTIP = 22;

const int AF_IPX = 23;

const int AF_SIP = 24;

const int pseudo_AF_PIP = 25;

const int AF_NDRV = 27;

const int AF_ISDN = 28;

const int AF_E164 = 28;

const int pseudo_AF_KEY = 29;

const int AF_INET6 = 30;

const int AF_NATM = 31;

const int AF_SYSTEM = 32;

const int AF_NETBIOS = 33;

const int AF_PPP = 34;

const int pseudo_AF_HDRCMPLT = 35;

const int AF_RESERVED_36 = 36;

const int AF_IEEE80211 = 37;

const int AF_UTUN = 38;

const int AF_VSOCK = 40;

const int AF_MAX = 41;

const int SOCK_MAXADDRLEN = 255;

const int _SS_MAXSIZE = 128;

const int _SS_ALIGNSIZE = 8;

const int _SS_PAD1SIZE = 6;

const int _SS_PAD2SIZE = 112;

const int PF_UNSPEC = 0;

const int PF_LOCAL = 1;

const int PF_UNIX = 1;

const int PF_INET = 2;

const int PF_IMPLINK = 3;

const int PF_PUP = 4;

const int PF_CHAOS = 5;

const int PF_NS = 6;

const int PF_ISO = 7;

const int PF_OSI = 7;

const int PF_ECMA = 8;

const int PF_DATAKIT = 9;

const int PF_CCITT = 10;

const int PF_SNA = 11;

const int PF_DECnet = 12;

const int PF_DLI = 13;

const int PF_LAT = 14;

const int PF_HYLINK = 15;

const int PF_APPLETALK = 16;

const int PF_ROUTE = 17;

const int PF_LINK = 18;

const int PF_XTP = 19;

const int PF_COIP = 20;

const int PF_CNT = 21;

const int PF_SIP = 24;

const int PF_IPX = 23;

const int PF_RTIP = 22;

const int PF_PIP = 25;

const int PF_NDRV = 27;

const int PF_ISDN = 28;

const int PF_KEY = 29;

const int PF_INET6 = 30;

const int PF_NATM = 31;

const int PF_SYSTEM = 32;

const int PF_NETBIOS = 33;

const int PF_PPP = 34;

const int PF_RESERVED_36 = 36;

const int PF_UTUN = 38;

const int PF_VSOCK = 40;

const int PF_MAX = 41;

const int NET_MAXID = 41;

const int NET_RT_DUMP = 1;

const int NET_RT_FLAGS = 2;

const int NET_RT_IFLIST = 3;

const int NET_RT_STAT = 4;

const int NET_RT_TRASH = 5;

const int NET_RT_IFLIST2 = 6;

const int NET_RT_DUMP2 = 7;

const int NET_RT_FLAGS_PRIV = 10;

const int NET_RT_MAXID = 11;

const int SOMAXCONN = 128;

const int MSG_OOB = 1;

const int MSG_PEEK = 2;

const int MSG_DONTROUTE = 4;

const int MSG_EOR = 8;

const int MSG_TRUNC = 16;

const int MSG_CTRUNC = 32;

const int MSG_WAITALL = 64;

const int MSG_DONTWAIT = 128;

const int MSG_EOF = 256;

const int MSG_WAITSTREAM = 512;

const int MSG_FLUSH = 1024;

const int MSG_HOLD = 2048;

const int MSG_SEND = 4096;

const int MSG_HAVEMORE = 8192;

const int MSG_RCVMORE = 16384;

const int MSG_NEEDSA = 65536;

const int MSG_NOSIGNAL = 524288;

const int SCM_RIGHTS = 1;

const int SCM_TIMESTAMP = 2;

const int SCM_CREDS = 3;

const int SCM_TIMESTAMP_MONOTONIC = 4;

const int SHUT_RD = 0;

const int SHUT_WR = 1;

const int SHUT_RDWR = 2;

const int __DARWIN_CLK_TCK = 100;

const int CHAR_BIT = 8;

const int MB_LEN_MAX = 6;

const int CLK_TCK = 100;

const int SCHAR_MAX = 127;

const int SCHAR_MIN = -128;

const int UCHAR_MAX = 255;

const int CHAR_MAX = 127;

const int CHAR_MIN = -128;

const int USHRT_MAX = 65535;

const int SHRT_MAX = 32767;

const int SHRT_MIN = -32768;

const int UINT_MAX = 4294967295;

const int INT_MAX = 2147483647;

const int INT_MIN = -2147483648;

const int ULONG_MAX = -1;

const int LONG_MAX = 9223372036854775807;

const int LONG_MIN = -9223372036854775808;

const int ULLONG_MAX = -1;

const int LLONG_MAX = 9223372036854775807;

const int LLONG_MIN = -9223372036854775808;

const int LONG_BIT = 64;

const int SSIZE_MAX = 9223372036854775807;

const int WORD_BIT = 32;

const int SIZE_T_MAX = -1;

const int UQUAD_MAX = -1;

const int QUAD_MAX = 9223372036854775807;

const int QUAD_MIN = -9223372036854775808;

const int ARG_MAX = 1048576;

const int CHILD_MAX = 266;

const int GID_MAX = 2147483647;

const int LINK_MAX = 32767;

const int MAX_CANON = 1024;

const int MAX_INPUT = 1024;

const int NAME_MAX = 255;

const int NGROUPS_MAX = 16;

const int UID_MAX = 2147483647;

const int OPEN_MAX = 10240;

const int PATH_MAX = 1024;

const int PIPE_BUF = 512;

const int BC_BASE_MAX = 99;

const int BC_DIM_MAX = 2048;

const int BC_SCALE_MAX = 99;

const int BC_STRING_MAX = 1000;

const int CHARCLASS_NAME_MAX = 14;

const int COLL_WEIGHTS_MAX = 2;

const int EQUIV_CLASS_MAX = 2;

const int EXPR_NEST_MAX = 32;

const int LINE_MAX = 2048;

const int RE_DUP_MAX = 255;

const int NZERO = 20;

const int _POSIX_ARG_MAX = 4096;

const int _POSIX_CHILD_MAX = 25;

const int _POSIX_LINK_MAX = 8;

const int _POSIX_MAX_CANON = 255;

const int _POSIX_MAX_INPUT = 255;

const int _POSIX_NAME_MAX = 14;

const int _POSIX_NGROUPS_MAX = 8;

const int _POSIX_OPEN_MAX = 20;

const int _POSIX_PATH_MAX = 256;

const int _POSIX_PIPE_BUF = 512;

const int _POSIX_SSIZE_MAX = 32767;

const int _POSIX_STREAM_MAX = 8;

const int _POSIX_TZNAME_MAX = 6;

const int _POSIX2_BC_BASE_MAX = 99;

const int _POSIX2_BC_DIM_MAX = 2048;

const int _POSIX2_BC_SCALE_MAX = 99;

const int _POSIX2_BC_STRING_MAX = 1000;

const int _POSIX2_EQUIV_CLASS_MAX = 2;

const int _POSIX2_EXPR_NEST_MAX = 32;

const int _POSIX2_LINE_MAX = 2048;

const int _POSIX2_RE_DUP_MAX = 255;

const int _POSIX_AIO_LISTIO_MAX = 2;

const int _POSIX_AIO_MAX = 1;

const int _POSIX_DELAYTIMER_MAX = 32;

const int _POSIX_MQ_OPEN_MAX = 8;

const int _POSIX_MQ_PRIO_MAX = 32;

const int _POSIX_RTSIG_MAX = 8;

const int _POSIX_SEM_NSEMS_MAX = 256;

const int _POSIX_SEM_VALUE_MAX = 32767;

const int _POSIX_SIGQUEUE_MAX = 32;

const int _POSIX_TIMER_MAX = 32;

const int _POSIX_CLOCKRES_MIN = 20000000;

const int _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;

const int _POSIX_THREAD_KEYS_MAX = 128;

const int _POSIX_THREAD_THREADS_MAX = 64;

const int PTHREAD_DESTRUCTOR_ITERATIONS = 4;

const int PTHREAD_KEYS_MAX = 512;

const int PTHREAD_STACK_MIN = 8192;

const int _POSIX_HOST_NAME_MAX = 255;

const int _POSIX_LOGIN_NAME_MAX = 9;

const int _POSIX_SS_REPL_MAX = 4;

const int _POSIX_SYMLINK_MAX = 255;

const int _POSIX_SYMLOOP_MAX = 8;

const int _POSIX_TRACE_EVENT_NAME_MAX = 30;

const int _POSIX_TRACE_NAME_MAX = 8;

const int _POSIX_TRACE_SYS_MAX = 8;

const int _POSIX_TRACE_USER_EVENT_MAX = 32;

const int _POSIX_TTY_NAME_MAX = 9;

const int _POSIX2_CHARCLASS_NAME_MAX = 14;

const int _POSIX2_COLL_WEIGHTS_MAX = 2;

const int _POSIX_RE_DUP_MAX = 255;

const int OFF_MIN = -9223372036854775808;

const int OFF_MAX = 9223372036854775807;

const int PASS_MAX = 128;

const int NL_ARGMAX = 9;

const int NL_LANGMAX = 14;

const int NL_MSGMAX = 32767;

const int NL_NMAX = 1;

const int NL_SETMAX = 255;

const int NL_TEXTMAX = 2048;

const int _XOPEN_IOV_MAX = 16;

const int IOV_MAX = 1024;

const int _XOPEN_NAME_MAX = 255;

const int _XOPEN_PATH_MAX = 1024;

const int CLOCKS_PER_SEC = 1000000;

const int CLOCK_REALTIME = 0;

const int CLOCK_MONOTONIC = 6;

const int CLOCK_MONOTONIC_RAW = 4;

const int CLOCK_MONOTONIC_RAW_APPROX = 5;

const int CLOCK_UPTIME_RAW = 8;

const int CLOCK_UPTIME_RAW_APPROX = 9;

const int CLOCK_PROCESS_CPUTIME_ID = 12;

const int CLOCK_THREAD_CPUTIME_ID = 16;

const int TIME_UTC = 1;

const int ITIMER_REAL = 0;

const int ITIMER_VIRTUAL = 1;

const int ITIMER_PROF = 2;

const int DST_NONE = 0;

const int DST_USA = 1;

const int DST_AUST = 2;

const int DST_WET = 3;

const int DST_MET = 4;

const int DST_EET = 5;

const int DST_CAN = 6;

const int CURL_SOCKET_BAD = -1;

const int CURLSSLBACKEND_LIBRESSL = 1;

const int CURLSSLBACKEND_BORINGSSL = 1;

const int CURLSSLBACKEND_CYASSL = 7;

const int CURLSSLBACKEND_DARWINSSL = 9;

const int CURL_HTTPPOST_FILENAME = 1;

const int CURL_HTTPPOST_READFILE = 2;

const int CURL_HTTPPOST_PTRNAME = 4;

const int CURL_HTTPPOST_PTRCONTENTS = 8;

const int CURL_HTTPPOST_BUFFER = 16;

const int CURL_HTTPPOST_PTRBUFFER = 32;

const int CURL_HTTPPOST_CALLBACK = 64;

const int CURL_HTTPPOST_LARGE = 128;

const int CURL_PROGRESSFUNC_CONTINUE = 268435457;

const int CURL_MAX_READ_SIZE = 524288;

const int CURL_MAX_WRITE_SIZE = 16384;

const int CURL_MAX_HTTP_HEADER = 102400;

const int CURL_WRITEFUNC_PAUSE = 268435457;

const int CURLFINFOFLAG_KNOWN_FILENAME = 1;

const int CURLFINFOFLAG_KNOWN_FILETYPE = 2;

const int CURLFINFOFLAG_KNOWN_TIME = 4;

const int CURLFINFOFLAG_KNOWN_PERM = 8;

const int CURLFINFOFLAG_KNOWN_UID = 16;

const int CURLFINFOFLAG_KNOWN_GID = 32;

const int CURLFINFOFLAG_KNOWN_SIZE = 64;

const int CURLFINFOFLAG_KNOWN_HLINKCOUNT = 128;

const int CURL_CHUNK_BGN_FUNC_OK = 0;

const int CURL_CHUNK_BGN_FUNC_FAIL = 1;

const int CURL_CHUNK_BGN_FUNC_SKIP = 2;

const int CURL_CHUNK_END_FUNC_OK = 0;

const int CURL_CHUNK_END_FUNC_FAIL = 1;

const int CURL_FNMATCHFUNC_MATCH = 0;

const int CURL_FNMATCHFUNC_NOMATCH = 1;

const int CURL_FNMATCHFUNC_FAIL = 2;

const int CURL_SEEKFUNC_OK = 0;

const int CURL_SEEKFUNC_FAIL = 1;

const int CURL_SEEKFUNC_CANTSEEK = 2;

const int CURL_READFUNC_ABORT = 268435456;

const int CURL_READFUNC_PAUSE = 268435457;

const int CURL_TRAILERFUNC_OK = 0;

const int CURL_TRAILERFUNC_ABORT = 1;

const int CURL_SOCKOPT_OK = 0;

const int CURL_SOCKOPT_ERROR = 1;

const int CURL_SOCKOPT_ALREADY_CONNECTED = 2;

const int CURLE_OBSOLETE16 = 16;

const int CURLE_OBSOLETE10 = 10;

const int CURLE_OBSOLETE12 = 12;

const int CURLOPT_ENCODING = 10102;

const int CURLE_FTP_WEIRD_SERVER_REPLY = 8;

const int CURLE_SSL_CACERT = 60;

const int CURLE_UNKNOWN_TELNET_OPTION = 48;

const int CURLE_SSL_PEER_CERTIFICATE = 60;

const int CURLE_OBSOLETE = 50;

const int CURLE_BAD_PASSWORD_ENTERED = 46;

const int CURLE_BAD_CALLING_ORDER = 44;

const int CURLE_FTP_USER_PASSWORD_INCORRECT = 10;

const int CURLE_FTP_CANT_RECONNECT = 16;

const int CURLE_FTP_COULDNT_GET_SIZE = 32;

const int CURLE_FTP_COULDNT_SET_ASCII = 29;

const int CURLE_FTP_WEIRD_USER_REPLY = 12;

const int CURLE_FTP_WRITE_ERROR = 20;

const int CURLE_LIBRARY_NOT_FOUND = 40;

const int CURLE_MALFORMAT_USER = 24;

const int CURLE_SHARE_IN_USE = 57;

const int CURLE_URL_MALFORMAT_USER = 4;

const int CURLE_FTP_ACCESS_DENIED = 9;

const int CURLE_FTP_COULDNT_SET_BINARY = 17;

const int CURLE_FTP_QUOTE_ERROR = 21;

const int CURLE_TFTP_DISKFULL = 70;

const int CURLE_TFTP_EXISTS = 73;

const int CURLE_HTTP_RANGE_ERROR = 33;

const int CURLE_FTP_SSL_FAILED = 64;

const int CURLE_OPERATION_TIMEOUTED = 28;

const int CURLE_HTTP_NOT_FOUND = 22;

const int CURLE_HTTP_PORT_FAILED = 45;

const int CURLE_FTP_COULDNT_STOR_FILE = 25;

const int CURLE_FTP_PARTIAL_FILE = 18;

const int CURLE_FTP_BAD_DOWNLOAD_RESUME = 36;

const int CURLE_ALREADY_COMPLETE = 99999;

const int CURLOPT_FILE = 10001;

const int CURLOPT_INFILE = 10009;

const int CURLOPT_WRITEHEADER = 10029;

const int CURLOPT_WRITEINFO = 10040;

const int CURLOPT_CLOSEPOLICY = 72;

const int CURLAUTH_NONE = 0;

const int CURLAUTH_BASIC = 1;

const int CURLAUTH_DIGEST = 2;

const int CURLAUTH_NEGOTIATE = 4;

const int CURLAUTH_GSSNEGOTIATE = 4;

const int CURLAUTH_GSSAPI = 4;

const int CURLAUTH_NTLM = 8;

const int CURLAUTH_DIGEST_IE = 16;

const int CURLAUTH_NTLM_WB = 32;

const int CURLAUTH_BEARER = 64;

const int CURLAUTH_AWS_SIGV4 = 128;

const int CURLAUTH_ONLY = 2147483648;

const int CURLAUTH_ANY = -17;

const int CURLAUTH_ANYSAFE = -18;

const int CURLSSH_AUTH_ANY = -1;

const int CURLSSH_AUTH_NONE = 0;

const int CURLSSH_AUTH_PUBLICKEY = 1;

const int CURLSSH_AUTH_PASSWORD = 2;

const int CURLSSH_AUTH_HOST = 4;

const int CURLSSH_AUTH_KEYBOARD = 8;

const int CURLSSH_AUTH_AGENT = 16;

const int CURLSSH_AUTH_GSSAPI = 32;

const int CURLSSH_AUTH_DEFAULT = -1;

const int CURLGSSAPI_DELEGATION_NONE = 0;

const int CURLGSSAPI_DELEGATION_POLICY_FLAG = 1;

const int CURLGSSAPI_DELEGATION_FLAG = 2;

const int CURL_ERROR_SIZE = 256;

const int CURLSSLOPT_ALLOW_BEAST = 1;

const int CURLSSLOPT_NO_REVOKE = 2;

const int CURLSSLOPT_NO_PARTIALCHAIN = 4;

const int CURLSSLOPT_REVOKE_BEST_EFFORT = 8;

const int CURLSSLOPT_NATIVE_CA = 16;

const int CURL_HET_DEFAULT = 200;

const int CURL_UPKEEP_INTERVAL_DEFAULT = 60000;

const int CURLFTPSSL_NONE = 0;

const int CURLFTPSSL_TRY = 1;

const int CURLFTPSSL_CONTROL = 2;

const int CURLFTPSSL_ALL = 3;

const int CURLFTPSSL_LAST = 4;

const int CURLHEADER_UNIFIED = 0;

const int CURLHEADER_SEPARATE = 1;

const int CURLALTSVC_READONLYFILE = 4;

const int CURLALTSVC_H1 = 8;

const int CURLALTSVC_H2 = 16;

const int CURLALTSVC_H3 = 32;

const int CURLHSTS_ENABLE = 1;

const int CURLHSTS_READONLYFILE = 2;

const int CURLPROTO_HTTP = 1;

const int CURLPROTO_HTTPS = 2;

const int CURLPROTO_FTP = 4;

const int CURLPROTO_FTPS = 8;

const int CURLPROTO_SCP = 16;

const int CURLPROTO_SFTP = 32;

const int CURLPROTO_TELNET = 64;

const int CURLPROTO_LDAP = 128;

const int CURLPROTO_LDAPS = 256;

const int CURLPROTO_DICT = 512;

const int CURLPROTO_FILE = 1024;

const int CURLPROTO_TFTP = 2048;

const int CURLPROTO_IMAP = 4096;

const int CURLPROTO_IMAPS = 8192;

const int CURLPROTO_POP3 = 16384;

const int CURLPROTO_POP3S = 32768;

const int CURLPROTO_SMTP = 65536;

const int CURLPROTO_SMTPS = 131072;

const int CURLPROTO_RTSP = 262144;

const int CURLPROTO_RTMP = 524288;

const int CURLPROTO_RTMPT = 1048576;

const int CURLPROTO_RTMPE = 2097152;

const int CURLPROTO_RTMPTE = 4194304;

const int CURLPROTO_RTMPS = 8388608;

const int CURLPROTO_RTMPTS = 16777216;

const int CURLPROTO_GOPHER = 33554432;

const int CURLPROTO_SMB = 67108864;

const int CURLPROTO_SMBS = 134217728;

const int CURLPROTO_MQTT = 268435456;

const int CURLPROTO_GOPHERS = 536870912;

const int CURLPROTO_ALL = -1;

const int CURLOPTTYPE_LONG = 0;

const int CURLOPTTYPE_OBJECTPOINT = 10000;

const int CURLOPTTYPE_FUNCTIONPOINT = 20000;

const int CURLOPTTYPE_OFF_T = 30000;

const int CURLOPTTYPE_BLOB = 40000;

const int CURLOPTTYPE_STRINGPOINT = 10000;

const int CURLOPTTYPE_SLISTPOINT = 10000;

const int CURLOPTTYPE_CBPOINT = 10000;

const int CURLOPTTYPE_VALUES = 0;

const int CURLOPT_PROGRESSDATA = 10057;

const int CURLOPT_SERVER_RESPONSE_TIMEOUT = 112;

const int CURLOPT_POST301 = 161;

const int CURLOPT_SSLKEYPASSWD = 10026;

const int CURLOPT_FTPAPPEND = 50;

const int CURLOPT_FTPLISTONLY = 48;

const int CURLOPT_FTP_SSL = 119;

const int CURLOPT_SSLCERTPASSWD = 10026;

const int CURLOPT_KRB4LEVEL = 10063;

const int CURL_IPRESOLVE_WHATEVER = 0;

const int CURL_IPRESOLVE_V4 = 1;

const int CURL_IPRESOLVE_V6 = 2;

const int CURLOPT_RTSPHEADER = 10023;

const int CURL_HTTP_VERSION_2 = 3;

const int CURL_REDIR_GET_ALL = 0;

const int CURL_REDIR_POST_301 = 1;

const int CURL_REDIR_POST_302 = 2;

const int CURL_REDIR_POST_303 = 4;

const int CURL_REDIR_POST_ALL = 7;

const int CURL_ZERO_TERMINATED = -1;

const int CURLINFO_STRING = 1048576;

const int CURLINFO_LONG = 2097152;

const int CURLINFO_DOUBLE = 3145728;

const int CURLINFO_SLIST = 4194304;

const int CURLINFO_PTR = 4194304;

const int CURLINFO_SOCKET = 5242880;

const int CURLINFO_OFF_T = 6291456;

const int CURLINFO_MASK = 1048575;

const int CURLINFO_TYPEMASK = 15728640;

const int CURLINFO_HTTP_CODE = 2097154;

const int CURL_GLOBAL_SSL = 1;

const int CURL_GLOBAL_WIN32 = 2;

const int CURL_GLOBAL_ALL = 3;

const int CURL_GLOBAL_NOTHING = 0;

const int CURL_GLOBAL_DEFAULT = 3;

const int CURL_GLOBAL_ACK_EINTR = 4;

const int CURLVERSION_NOW = 8;

const int CURL_VERSION_IPV6 = 1;

const int CURL_VERSION_KERBEROS4 = 2;

const int CURL_VERSION_SSL = 4;

const int CURL_VERSION_LIBZ = 8;

const int CURL_VERSION_NTLM = 16;

const int CURL_VERSION_GSSNEGOTIATE = 32;

const int CURL_VERSION_DEBUG = 64;

const int CURL_VERSION_ASYNCHDNS = 128;

const int CURL_VERSION_SPNEGO = 256;

const int CURL_VERSION_LARGEFILE = 512;

const int CURL_VERSION_IDN = 1024;

const int CURL_VERSION_SSPI = 2048;

const int CURL_VERSION_CONV = 4096;

const int CURL_VERSION_CURLDEBUG = 8192;

const int CURL_VERSION_TLSAUTH_SRP = 16384;

const int CURL_VERSION_NTLM_WB = 32768;

const int CURL_VERSION_HTTP2 = 65536;

const int CURL_VERSION_GSSAPI = 131072;

const int CURL_VERSION_KERBEROS5 = 262144;

const int CURL_VERSION_UNIX_SOCKETS = 524288;

const int CURL_VERSION_PSL = 1048576;

const int CURL_VERSION_HTTPS_PROXY = 2097152;

const int CURL_VERSION_MULTI_SSL = 4194304;

const int CURL_VERSION_BROTLI = 8388608;

const int CURL_VERSION_ALTSVC = 16777216;

const int CURL_VERSION_HTTP3 = 33554432;

const int CURL_VERSION_ZSTD = 67108864;

const int CURL_VERSION_UNICODE = 134217728;

const int CURL_VERSION_HSTS = 268435456;

const int CURL_VERSION_GSASL = 536870912;

const int CURLPAUSE_RECV = 1;

const int CURLPAUSE_RECV_CONT = 0;

const int CURLPAUSE_SEND = 4;

const int CURLPAUSE_SEND_CONT = 0;

const int CURLPAUSE_ALL = 5;

const int CURLPAUSE_CONT = 0;

const int CURL_BLOB_COPY = 1;

const int CURL_BLOB_NOCOPY = 0;

const int CURLM_CALL_MULTI_SOCKET = -1;

const int CURLPIPE_NOTHING = 0;

const int CURLPIPE_HTTP1 = 1;

const int CURLPIPE_MULTIPLEX = 2;

const int CURL_WAIT_POLLIN = 1;

const int CURL_WAIT_POLLPRI = 2;

const int CURL_WAIT_POLLOUT = 4;

const int CURL_POLL_NONE = 0;

const int CURL_POLL_IN = 1;

const int CURL_POLL_OUT = 2;

const int CURL_POLL_INOUT = 3;

const int CURL_POLL_REMOVE = 4;

const int CURL_SOCKET_TIMEOUT = -1;

const int CURL_CSELECT_IN = 1;

const int CURL_CSELECT_OUT = 2;

const int CURL_CSELECT_ERR = 4;

const int CURL_PUSH_OK = 0;

const int CURL_PUSH_DENY = 1;

const int CURL_PUSH_ERROROUT = 2;

const int CURLU_DEFAULT_PORT = 1;

const int CURLU_NO_DEFAULT_PORT = 2;

const int CURLU_DEFAULT_SCHEME = 4;

const int CURLU_NON_SUPPORT_SCHEME = 8;

const int CURLU_PATH_AS_IS = 16;

const int CURLU_DISALLOW_USER = 32;

const int CURLU_URLDECODE = 64;

const int CURLU_URLENCODE = 128;

const int CURLU_APPENDQUERY = 256;

const int CURLU_GUESS_SCHEME = 512;

const int CURLU_NO_AUTHORITY = 1024;

typedef _c_curl_mime_init = ffi.Pointer<curl_mime> Function(
  ffi.Pointer<ffi.Void> easy,
);

typedef _dart_curl_mime_init = ffi.Pointer<curl_mime> Function(
  ffi.Pointer<ffi.Void> easy,
);

typedef _c_curl_mime_free = ffi.Void Function(
  ffi.Pointer<curl_mime> mime,
);

typedef _dart_curl_mime_free = void Function(
  ffi.Pointer<curl_mime> mime,
);

typedef _c_curl_mime_addpart = ffi.Pointer<curl_mimepart> Function(
  ffi.Pointer<curl_mime> mime,
);

typedef _dart_curl_mime_addpart = ffi.Pointer<curl_mimepart> Function(
  ffi.Pointer<curl_mime> mime,
);

typedef _c_curl_mime_name = ffi.Int32 Function(
  ffi.Pointer<curl_mimepart> part_1,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_curl_mime_name = int Function(
  ffi.Pointer<curl_mimepart> part_1,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_curl_mime_filename = ffi.Int32 Function(
  ffi.Pointer<curl_mimepart> part_1,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _dart_curl_mime_filename = int Function(
  ffi.Pointer<curl_mimepart> part_1,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _c_curl_mime_data = ffi.Int32 Function(
  ffi.Pointer<curl_mimepart> part_1,
  ffi.Pointer<ffi.Int8> data,
  ffi.Uint64 datasize,
);

typedef _dart_curl_mime_data = int Function(
  ffi.Pointer<curl_mimepart> part_1,
  ffi.Pointer<ffi.Int8> data,
  int datasize,
);

typedef _c_curl_mime_filedata = ffi.Int32 Function(
  ffi.Pointer<curl_mimepart> part_1,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _dart_curl_mime_filedata = int Function(
  ffi.Pointer<curl_mimepart> part_1,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _c_curl_version = ffi.Pointer<ffi.Int8> Function();

typedef _dart_curl_version = ffi.Pointer<ffi.Int8> Function();

typedef _c_curl_slist_append = ffi.Pointer<curl_slist> Function(
  ffi.Pointer<curl_slist> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_curl_slist_append = ffi.Pointer<curl_slist> Function(
  ffi.Pointer<curl_slist> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_curl_slist_free_all = ffi.Void Function(
  ffi.Pointer<curl_slist> arg0,
);

typedef _dart_curl_slist_free_all = void Function(
  ffi.Pointer<curl_slist> arg0,
);

typedef _c_curl_getdate = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> p,
  ffi.Pointer<ffi.Int64> unused,
);

typedef _dart_curl_getdate = int Function(
  ffi.Pointer<ffi.Int8> p,
  ffi.Pointer<ffi.Int64> unused,
);

typedef _c_curl_easy_strerror = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 arg0,
);

typedef _dart_curl_easy_strerror = ffi.Pointer<ffi.Int8> Function(
  int arg0,
);

typedef _c_curl_easy_init = ffi.Pointer<ffi.Void> Function();

typedef _dart_curl_easy_init = ffi.Pointer<ffi.Void> Function();

typedef _c_curl_easy_cleanup = ffi.Void Function(
  ffi.Pointer<ffi.Void> curl,
);

typedef _dart_curl_easy_cleanup = void Function(
  ffi.Pointer<ffi.Void> curl,
);

typedef _c_curl_multi_init = ffi.Pointer<ffi.Void> Function();

typedef _dart_curl_multi_init = ffi.Pointer<ffi.Void> Function();

typedef _c_curl_multi_add_handle = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> multi_handle,
  ffi.Pointer<ffi.Void> curl_handle,
);

typedef _dart_curl_multi_add_handle = int Function(
  ffi.Pointer<ffi.Void> multi_handle,
  ffi.Pointer<ffi.Void> curl_handle,
);

typedef _c_curl_multi_remove_handle = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> multi_handle,
  ffi.Pointer<ffi.Void> curl_handle,
);

typedef _dart_curl_multi_remove_handle = int Function(
  ffi.Pointer<ffi.Void> multi_handle,
  ffi.Pointer<ffi.Void> curl_handle,
);

typedef _c_curl_multi_perform = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> multi_handle,
  ffi.Pointer<ffi.Int32> running_handles,
);

typedef _dart_curl_multi_perform = int Function(
  ffi.Pointer<ffi.Void> multi_handle,
  ffi.Pointer<ffi.Int32> running_handles,
);

typedef _c_curl_multi_info_read = ffi.Pointer<CURLMsg> Function(
  ffi.Pointer<ffi.Void> multi_handle,
  ffi.Pointer<ffi.Int32> msgs_in_queue,
);

typedef _dart_curl_multi_info_read = ffi.Pointer<CURLMsg> Function(
  ffi.Pointer<ffi.Void> multi_handle,
  ffi.Pointer<ffi.Int32> msgs_in_queue,
);

typedef _typedefC_1 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_2 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_3 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef _typedefC_4 = ffi.Int64 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int64,
  ffi.Int32,
);

typedef _typedefC_5 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);
